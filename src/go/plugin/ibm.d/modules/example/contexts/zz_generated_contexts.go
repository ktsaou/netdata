// Code generated by metricgen; DO NOT EDIT.
// source: contexts.yaml

package contexts

import (
	"strings"
	"github.com/netdata/netdata/go/plugins/plugin/ibm.d/framework"
	"github.com/netdata/netdata/go/plugins/plugin/go.d/agent/module"
)

// cleanLabelValue cleans a label value for use in instance/dimension IDs
func cleanLabelValue(value string) string {
	// Replace problematic characters
	r := strings.NewReplacer(
		" ", "_",
		".", "_",
		"-", "_",
		"/", "_",
		":", "_",
		"=", "_",
		",", "_",
		"(", "_",
		")", "_",
	)
	return strings.ToLower(r.Replace(value))
}

// EmptyLabels is used for contexts without labels
type EmptyLabels struct{}

// InstanceID for empty labels just returns the context name
func (EmptyLabels) InstanceID(contextName string) string {
	return contextName
}


// --- Item ---


// ItemItemPercentageValues defines the type-safe values for Item.ItemPercentage context
type ItemItemPercentageValues struct {
	Percentage int64
}

// ItemItemPercentageContext provides type-safe operations for Item.ItemPercentage context
type ItemItemPercentageContext struct {
	framework.Context[ItemLabels]
}

// Set provides type-safe dimension setting for Item.ItemPercentage context
func (c ItemItemPercentageContext) Set(state *framework.CollectorState, labels ItemLabels, values ItemItemPercentageValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"percentage": values.Percentage,
	})
}

// ItemItemCounterValues defines the type-safe values for Item.ItemCounter context
type ItemItemCounterValues struct {
	Counter int64
}

// ItemItemCounterContext provides type-safe operations for Item.ItemCounter context
type ItemItemCounterContext struct {
	framework.Context[ItemLabels]
}

// Set provides type-safe dimension setting for Item.ItemCounter context
func (c ItemItemCounterContext) Set(state *framework.CollectorState, labels ItemLabels, values ItemItemCounterValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"counter": values.Counter,
	})
}



// ItemLabels defines the required labels for Item contexts
type ItemLabels struct {
	Slot string
}

// InstanceID generates a unique instance ID using the hardcoded label order from YAML
func (l ItemLabels) InstanceID(contextName string) string {
	// Label order from YAML: slot
	return contextName + "." + cleanLabelValue(l.Slot)
}


// Item contains all metric contexts for Item
var Item = struct {
	ItemPercentage ItemItemPercentageContext
	ItemCounter ItemItemCounterContext
}{
	ItemPercentage: ItemItemPercentageContext{
		Context: framework.Context[ItemLabels]{
		Name:       "example.item_percentage",
		Family:     "items",
		Title:      "Item Percentage",
		Units:      "percentage",
		Type:       module.Stacked,
		Priority:   2000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "percentage",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"slot",
		},
		},
	},
	ItemCounter: ItemItemCounterContext{
		Context: framework.Context[ItemLabels]{
		Name:       "example.item_counter",
		Family:     "items",
		Title:      "Item Counter",
		Units:      "count/s",
		Type:       module.Line,
		Priority:   2001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "counter",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"slot",
		},
		},
	},
}


// --- Test ---


// TestTestAbsoluteValues defines the type-safe values for Test.TestAbsolute context
type TestTestAbsoluteValues struct {
	Value int64
}

// TestTestAbsoluteContext provides type-safe operations for Test.TestAbsolute context
type TestTestAbsoluteContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for Test.TestAbsolute context
func (c TestTestAbsoluteContext) Set(state *framework.CollectorState, labels EmptyLabels, values TestTestAbsoluteValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"value": values.Value,
	})
}

// TestTestIncrementalValues defines the type-safe values for Test.TestIncremental context
type TestTestIncrementalValues struct {
	Counter int64
}

// TestTestIncrementalContext provides type-safe operations for Test.TestIncremental context
type TestTestIncrementalContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for Test.TestIncremental context
func (c TestTestIncrementalContext) Set(state *framework.CollectorState, labels EmptyLabels, values TestTestIncrementalValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"counter": values.Counter,
	})
}




// Test contains all metric contexts for Test
var Test = struct {
	TestAbsolute TestTestAbsoluteContext
	TestIncremental TestTestIncrementalContext
}{
	TestAbsolute: TestTestAbsoluteContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "example.test_absolute",
		Family:     "test",
		Title:      "Test Absolute Value (timestamp % 60)",
		Units:      "seconds",
		Type:       module.Line,
		Priority:   1000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "value",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
	TestIncremental: TestTestIncrementalContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "example.test_incremental",
		Family:     "test",
		Title:      "Test Incremental Counter",
		Units:      "count/s",
		Type:       module.Line,
		Priority:   1001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "counter",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
}



// GetAllContexts returns all contexts for framework registration
func GetAllContexts() []interface{} {
	return []interface{}{
		&Item.ItemPercentage.Context,
		&Item.ItemCounter.Context,
		&Test.TestAbsolute.Context,
		&Test.TestIncremental.Context,
	}
}
