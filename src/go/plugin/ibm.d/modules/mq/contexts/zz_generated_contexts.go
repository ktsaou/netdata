// Code generated by metricgen; DO NOT EDIT.
// source: contexts.yaml

package contexts

import (
	"strings"
	"github.com/netdata/netdata/go/plugins/plugin/ibm.d/framework"
	"github.com/netdata/netdata/go/plugins/plugin/go.d/agent/module"
)

// cleanLabelValue cleans a label value for use in instance/dimension IDs
func cleanLabelValue(value string) string {
	// Replace problematic characters
	r := strings.NewReplacer(
		" ", "_",
		".", "_",
		"-", "_",
		"/", "_",
		":", "_",
		"=", "_",
		",", "_",
		"(", "_",
		")", "_",
	)
	return strings.ToLower(r.Replace(value))
}

// EmptyLabels is used for contexts without labels
type EmptyLabels struct{}

// InstanceID for empty labels just returns the context name
func (EmptyLabels) InstanceID(contextName string) string {
	return contextName
}


// --- Channel ---


// ChannelStatusValues defines the type-safe values for Channel.Status context
type ChannelStatusValues struct {
	Inactive int64
	Binding int64
	Starting int64
	Running int64
	Stopping int64
	Retrying int64
	Stopped int64
	Requesting int64
	Paused int64
	Disconnected int64
	Initializing int64
	Switching int64
}

// ChannelStatusContext provides type-safe operations for Channel.Status context
type ChannelStatusContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.Status context
func (c ChannelStatusContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelStatusValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"inactive": values.Inactive,
		"binding": values.Binding,
		"starting": values.Starting,
		"running": values.Running,
		"stopping": values.Stopping,
		"retrying": values.Retrying,
		"stopped": values.Stopped,
		"requesting": values.Requesting,
		"paused": values.Paused,
		"disconnected": values.Disconnected,
		"initializing": values.Initializing,
		"switching": values.Switching,
	})
}

// ChannelMessagesValues defines the type-safe values for Channel.Messages context
type ChannelMessagesValues struct {
	Messages int64
}

// ChannelMessagesContext provides type-safe operations for Channel.Messages context
type ChannelMessagesContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.Messages context
func (c ChannelMessagesContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelMessagesValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"messages": values.Messages,
	})
}

// ChannelBytesValues defines the type-safe values for Channel.Bytes context
type ChannelBytesValues struct {
	Bytes int64
}

// ChannelBytesContext provides type-safe operations for Channel.Bytes context
type ChannelBytesContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.Bytes context
func (c ChannelBytesContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelBytesValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"bytes": values.Bytes,
	})
}

// ChannelBatchesValues defines the type-safe values for Channel.Batches context
type ChannelBatchesValues struct {
	Batches int64
}

// ChannelBatchesContext provides type-safe operations for Channel.Batches context
type ChannelBatchesContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.Batches context
func (c ChannelBatchesContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelBatchesValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"batches": values.Batches,
	})
}

// ChannelBatchSizeValues defines the type-safe values for Channel.BatchSize context
type ChannelBatchSizeValues struct {
	Batch_size int64
}

// ChannelBatchSizeContext provides type-safe operations for Channel.BatchSize context
type ChannelBatchSizeContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.BatchSize context
func (c ChannelBatchSizeContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelBatchSizeValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"batch_size": values.Batch_size,
	})
}

// ChannelBatchIntervalValues defines the type-safe values for Channel.BatchInterval context
type ChannelBatchIntervalValues struct {
	Batch_interval int64
}

// ChannelBatchIntervalContext provides type-safe operations for Channel.BatchInterval context
type ChannelBatchIntervalContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.BatchInterval context
func (c ChannelBatchIntervalContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelBatchIntervalValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"batch_interval": values.Batch_interval,
	})
}

// ChannelIntervalsValues defines the type-safe values for Channel.Intervals context
type ChannelIntervalsValues struct {
	Disc_interval int64
	Hb_interval int64
	Keep_alive_interval int64
}

// ChannelIntervalsContext provides type-safe operations for Channel.Intervals context
type ChannelIntervalsContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.Intervals context
func (c ChannelIntervalsContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelIntervalsValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"disc_interval": values.Disc_interval,
		"hb_interval": values.Hb_interval,
		"keep_alive_interval": values.Keep_alive_interval,
	})
}

// ChannelShortRetryCountValues defines the type-safe values for Channel.ShortRetryCount context
type ChannelShortRetryCountValues struct {
	Short_retry int64
}

// ChannelShortRetryCountContext provides type-safe operations for Channel.ShortRetryCount context
type ChannelShortRetryCountContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.ShortRetryCount context
func (c ChannelShortRetryCountContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelShortRetryCountValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"short_retry": values.Short_retry,
	})
}

// ChannelLongRetryIntervalValues defines the type-safe values for Channel.LongRetryInterval context
type ChannelLongRetryIntervalValues struct {
	Long_retry int64
}

// ChannelLongRetryIntervalContext provides type-safe operations for Channel.LongRetryInterval context
type ChannelLongRetryIntervalContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.LongRetryInterval context
func (c ChannelLongRetryIntervalContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelLongRetryIntervalValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"long_retry": values.Long_retry,
	})
}

// ChannelMaxMessageLengthValues defines the type-safe values for Channel.MaxMessageLength context
type ChannelMaxMessageLengthValues struct {
	Max_msg_length int64
}

// ChannelMaxMessageLengthContext provides type-safe operations for Channel.MaxMessageLength context
type ChannelMaxMessageLengthContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.MaxMessageLength context
func (c ChannelMaxMessageLengthContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelMaxMessageLengthValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"max_msg_length": values.Max_msg_length,
	})
}

// ChannelSharingConversationsValues defines the type-safe values for Channel.SharingConversations context
type ChannelSharingConversationsValues struct {
	Sharing_conversations int64
}

// ChannelSharingConversationsContext provides type-safe operations for Channel.SharingConversations context
type ChannelSharingConversationsContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.SharingConversations context
func (c ChannelSharingConversationsContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelSharingConversationsValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"sharing_conversations": values.Sharing_conversations,
	})
}

// ChannelNetworkPriorityValues defines the type-safe values for Channel.NetworkPriority context
type ChannelNetworkPriorityValues struct {
	Network_priority int64
}

// ChannelNetworkPriorityContext provides type-safe operations for Channel.NetworkPriority context
type ChannelNetworkPriorityContext struct {
	framework.Context[ChannelLabels]
}

// Set provides type-safe dimension setting for Channel.NetworkPriority context
func (c ChannelNetworkPriorityContext) Set(state *framework.CollectorState, labels ChannelLabels, values ChannelNetworkPriorityValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"network_priority": values.Network_priority,
	})
}



// ChannelLabels defines the required labels for Channel contexts
type ChannelLabels struct {
	Channel string
}

// InstanceID generates a unique instance ID using the hardcoded label order from YAML
func (l ChannelLabels) InstanceID(contextName string) string {
	// Label order from YAML: channel
	return contextName + "." + cleanLabelValue(l.Channel)
}


// Channel contains all metric contexts for Channel
var Channel = struct {
	Status ChannelStatusContext
	Messages ChannelMessagesContext
	Bytes ChannelBytesContext
	Batches ChannelBatchesContext
	BatchSize ChannelBatchSizeContext
	BatchInterval ChannelBatchIntervalContext
	Intervals ChannelIntervalsContext
	ShortRetryCount ChannelShortRetryCountContext
	LongRetryInterval ChannelLongRetryIntervalContext
	MaxMessageLength ChannelMaxMessageLengthContext
	SharingConversations ChannelSharingConversationsContext
	NetworkPriority ChannelNetworkPriorityContext
}{
	Status: ChannelStatusContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.status",
		Family:     "channels",
		Title:      "Channel Status",
		Units:      "status",
		Type:       module.Stacked,
		Priority:   3000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "inactive",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "binding",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "starting",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "running",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "stopping",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "retrying",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "stopped",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "requesting",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "paused",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "disconnected",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "initializing",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "switching",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	Messages: ChannelMessagesContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.messages",
		Family:     "channels",
		Title:      "Channel Message Rate",
		Units:      "messages/s",
		Type:       module.Line,
		Priority:   3001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "messages",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	Bytes: ChannelBytesContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.bytes",
		Family:     "channels",
		Title:      "Channel Data Transfer Rate",
		Units:      "bytes/s",
		Type:       module.Line,
		Priority:   3002,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "bytes",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	Batches: ChannelBatchesContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.batches",
		Family:     "channels",
		Title:      "Channel Batch Rate",
		Units:      "batches/s",
		Type:       module.Line,
		Priority:   3003,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "batches",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	BatchSize: ChannelBatchSizeContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.batch_size",
		Family:     "channels",
		Title:      "Channel Batch Size",
		Units:      "messages",
		Type:       module.Line,
		Priority:   3004,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "batch_size",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	BatchInterval: ChannelBatchIntervalContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.batch_interval",
		Family:     "channels",
		Title:      "Channel Batch Interval",
		Units:      "milliseconds",
		Type:       module.Line,
		Priority:   3005,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "batch_interval",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	Intervals: ChannelIntervalsContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.intervals",
		Family:     "channels",
		Title:      "Channel Intervals",
		Units:      "seconds",
		Type:       module.Line,
		Priority:   3006,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "disc_interval",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "hb_interval",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "keep_alive_interval",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	ShortRetryCount: ChannelShortRetryCountContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.short_retry_count",
		Family:     "channels",
		Title:      "Channel Short Retry Count",
		Units:      "retries",
		Type:       module.Line,
		Priority:   3007,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "short_retry",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	LongRetryInterval: ChannelLongRetryIntervalContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.long_retry_interval",
		Family:     "channels",
		Title:      "Channel Long Retry Interval",
		Units:      "seconds",
		Type:       module.Line,
		Priority:   3008,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "long_retry",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	MaxMessageLength: ChannelMaxMessageLengthContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.max_msg_length",
		Family:     "channels",
		Title:      "Channel Max Message Length",
		Units:      "bytes",
		Type:       module.Line,
		Priority:   3009,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "max_msg_length",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	SharingConversations: ChannelSharingConversationsContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.sharing_conversations",
		Family:     "channels",
		Title:      "Channel Sharing Conversations",
		Units:      "conversations",
		Type:       module.Line,
		Priority:   3010,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "sharing_conversations",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
	NetworkPriority: ChannelNetworkPriorityContext{
		Context: framework.Context[ChannelLabels]{
		Name:       "mq.channel.network_priority",
		Family:     "channels",
		Title:      "Channel Network Priority",
		Units:      "priority",
		Type:       module.Line,
		Priority:   3011,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "network_priority",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"channel",
		},
		},
	},
}


// --- Listener ---


// ListenerStatusValues defines the type-safe values for Listener.Status context
type ListenerStatusValues struct {
	Running int64
	Stopped int64
}

// ListenerStatusContext provides type-safe operations for Listener.Status context
type ListenerStatusContext struct {
	framework.Context[ListenerLabels]
}

// Set provides type-safe dimension setting for Listener.Status context
func (c ListenerStatusContext) Set(state *framework.CollectorState, labels ListenerLabels, values ListenerStatusValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"running": values.Running,
		"stopped": values.Stopped,
	})
}

// ListenerPortValues defines the type-safe values for Listener.Port context
type ListenerPortValues struct {
	Port int64
}

// ListenerPortContext provides type-safe operations for Listener.Port context
type ListenerPortContext struct {
	framework.Context[ListenerLabels]
}

// Set provides type-safe dimension setting for Listener.Port context
func (c ListenerPortContext) Set(state *framework.CollectorState, labels ListenerLabels, values ListenerPortValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"port": values.Port,
	})
}



// ListenerLabels defines the required labels for Listener contexts
type ListenerLabels struct {
	Listener string
}

// InstanceID generates a unique instance ID using the hardcoded label order from YAML
func (l ListenerLabels) InstanceID(contextName string) string {
	// Label order from YAML: listener
	return contextName + "." + cleanLabelValue(l.Listener)
}


// Listener contains all metric contexts for Listener
var Listener = struct {
	Status ListenerStatusContext
	Port ListenerPortContext
}{
	Status: ListenerStatusContext{
		Context: framework.Context[ListenerLabels]{
		Name:       "mq.listener.status",
		Family:     "listeners",
		Title:      "Listener Status",
		Units:      "status",
		Type:       module.Line,
		Priority:   5000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "running",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "stopped",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"listener",
		},
		},
	},
	Port: ListenerPortContext{
		Context: framework.Context[ListenerLabels]{
		Name:       "mq.listener.port",
		Family:     "listeners",
		Title:      "Listener Port",
		Units:      "port",
		Type:       module.Line,
		Priority:   5001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "port",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"listener",
		},
		},
	},
}


// --- Queue ---


// QueueDepthValues defines the type-safe values for Queue.Depth context
type QueueDepthValues struct {
	Current int64
	Max int64
}

// QueueDepthContext provides type-safe operations for Queue.Depth context
type QueueDepthContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.Depth context
func (c QueueDepthContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueDepthValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"current": values.Current,
		"max": values.Max,
	})
}

// QueueMessagesValues defines the type-safe values for Queue.Messages context
type QueueMessagesValues struct {
	Enqueued int64
	Dequeued int64
}

// QueueMessagesContext provides type-safe operations for Queue.Messages context
type QueueMessagesContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.Messages context
func (c QueueMessagesContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueMessagesValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"enqueued": values.Enqueued,
		"dequeued": values.Dequeued,
	})
}

// QueueConnectionsValues defines the type-safe values for Queue.Connections context
type QueueConnectionsValues struct {
	Input int64
	Output int64
}

// QueueConnectionsContext provides type-safe operations for Queue.Connections context
type QueueConnectionsContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.Connections context
func (c QueueConnectionsContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueConnectionsValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"input": values.Input,
		"output": values.Output,
	})
}

// QueueHighDepthValues defines the type-safe values for Queue.HighDepth context
type QueueHighDepthValues struct {
	High_depth int64
}

// QueueHighDepthContext provides type-safe operations for Queue.HighDepth context
type QueueHighDepthContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.HighDepth context
func (c QueueHighDepthContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueHighDepthValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"high_depth": values.High_depth,
	})
}

// QueueOldestMessageAgeValues defines the type-safe values for Queue.OldestMessageAge context
type QueueOldestMessageAgeValues struct {
	Oldest_msg_age int64
}

// QueueOldestMessageAgeContext provides type-safe operations for Queue.OldestMessageAge context
type QueueOldestMessageAgeContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.OldestMessageAge context
func (c QueueOldestMessageAgeContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueOldestMessageAgeValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"oldest_msg_age": values.Oldest_msg_age,
	})
}

// QueueUncommittedMessagesValues defines the type-safe values for Queue.UncommittedMessages context
type QueueUncommittedMessagesValues struct {
	Uncommitted int64
}

// QueueUncommittedMessagesContext provides type-safe operations for Queue.UncommittedMessages context
type QueueUncommittedMessagesContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.UncommittedMessages context
func (c QueueUncommittedMessagesContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueUncommittedMessagesValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"uncommitted": values.Uncommitted,
	})
}

// QueueLastActivityValues defines the type-safe values for Queue.LastActivity context
type QueueLastActivityValues struct {
	Since_last_get int64
	Since_last_put int64
}

// QueueLastActivityContext provides type-safe operations for Queue.LastActivity context
type QueueLastActivityContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.LastActivity context
func (c QueueLastActivityContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueLastActivityValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"since_last_get": values.Since_last_get,
		"since_last_put": values.Since_last_put,
	})
}

// QueueInhibitStatusValues defines the type-safe values for Queue.InhibitStatus context
type QueueInhibitStatusValues struct {
	Inhibit_get int64
	Inhibit_put int64
}

// QueueInhibitStatusContext provides type-safe operations for Queue.InhibitStatus context
type QueueInhibitStatusContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.InhibitStatus context
func (c QueueInhibitStatusContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueInhibitStatusValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"inhibit_get": values.Inhibit_get,
		"inhibit_put": values.Inhibit_put,
	})
}

// QueuePriorityValues defines the type-safe values for Queue.Priority context
type QueuePriorityValues struct {
	Def_priority int64
}

// QueuePriorityContext provides type-safe operations for Queue.Priority context
type QueuePriorityContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.Priority context
func (c QueuePriorityContext) Set(state *framework.CollectorState, labels QueueLabels, values QueuePriorityValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"def_priority": values.Def_priority,
	})
}

// QueueTriggersValues defines the type-safe values for Queue.Triggers context
type QueueTriggersValues struct {
	Trigger_depth int64
	Trigger_type int64
}

// QueueTriggersContext provides type-safe operations for Queue.Triggers context
type QueueTriggersContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.Triggers context
func (c QueueTriggersContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueTriggersValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"trigger_depth": values.Trigger_depth,
		"trigger_type": values.Trigger_type,
	})
}

// QueueBackoutThresholdValues defines the type-safe values for Queue.BackoutThreshold context
type QueueBackoutThresholdValues struct {
	Backout_threshold int64
}

// QueueBackoutThresholdContext provides type-safe operations for Queue.BackoutThreshold context
type QueueBackoutThresholdContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.BackoutThreshold context
func (c QueueBackoutThresholdContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueBackoutThresholdValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"backout_threshold": values.Backout_threshold,
	})
}

// QueueMaxMessageLengthValues defines the type-safe values for Queue.MaxMessageLength context
type QueueMaxMessageLengthValues struct {
	Max_msg_length int64
}

// QueueMaxMessageLengthContext provides type-safe operations for Queue.MaxMessageLength context
type QueueMaxMessageLengthContext struct {
	framework.Context[QueueLabels]
}

// Set provides type-safe dimension setting for Queue.MaxMessageLength context
func (c QueueMaxMessageLengthContext) Set(state *framework.CollectorState, labels QueueLabels, values QueueMaxMessageLengthValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"max_msg_length": values.Max_msg_length,
	})
}



// QueueLabels defines the required labels for Queue contexts
type QueueLabels struct {
	Queue string
	Type string
}

// InstanceID generates a unique instance ID using the hardcoded label order from YAML
func (l QueueLabels) InstanceID(contextName string) string {
	// Label order from YAML: queue, type
	return contextName + "." + cleanLabelValue(l.Queue) + "_" + cleanLabelValue(l.Type)
}


// Queue contains all metric contexts for Queue
var Queue = struct {
	Depth QueueDepthContext
	Messages QueueMessagesContext
	Connections QueueConnectionsContext
	HighDepth QueueHighDepthContext
	OldestMessageAge QueueOldestMessageAgeContext
	UncommittedMessages QueueUncommittedMessagesContext
	LastActivity QueueLastActivityContext
	InhibitStatus QueueInhibitStatusContext
	Priority QueuePriorityContext
	Triggers QueueTriggersContext
	BackoutThreshold QueueBackoutThresholdContext
	MaxMessageLength QueueMaxMessageLengthContext
}{
	Depth: QueueDepthContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.depth",
		Family:     "queues",
		Title:      "Queue Depth",
		Units:      "messages",
		Type:       module.Line,
		Priority:   2000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "current",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "max",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	Messages: QueueMessagesContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.messages",
		Family:     "queues",
		Title:      "Queue Messages",
		Units:      "messages/s",
		Type:       module.Line,
		Priority:   2001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "enqueued",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "dequeued",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	Connections: QueueConnectionsContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.connections",
		Family:     "queues",
		Title:      "Queue Connections",
		Units:      "connections",
		Type:       module.Line,
		Priority:   2002,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "input",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "output",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	HighDepth: QueueHighDepthContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.high_depth",
		Family:     "queues",
		Title:      "Queue Peak Depth",
		Units:      "messages",
		Type:       module.Line,
		Priority:   2003,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "high_depth",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	OldestMessageAge: QueueOldestMessageAgeContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.oldest_msg_age",
		Family:     "queues",
		Title:      "Queue Oldest Message Age",
		Units:      "seconds",
		Type:       module.Line,
		Priority:   2004,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "oldest_msg_age",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	UncommittedMessages: QueueUncommittedMessagesContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.uncommitted_msgs",
		Family:     "queues",
		Title:      "Queue Uncommitted Messages",
		Units:      "messages",
		Type:       module.Line,
		Priority:   2005,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "uncommitted",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	LastActivity: QueueLastActivityContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.last_activity",
		Family:     "queues",
		Title:      "Time Since Last Queue Activity",
		Units:      "seconds",
		Type:       module.Line,
		Priority:   2006,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "since_last_get",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "since_last_put",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	InhibitStatus: QueueInhibitStatusContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.inhibit_status",
		Family:     "queues",
		Title:      "Queue Inhibit Status",
		Units:      "status",
		Type:       module.Line,
		Priority:   2007,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "inhibit_get",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "inhibit_put",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	Priority: QueuePriorityContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.priority",
		Family:     "queues",
		Title:      "Queue Priority Configuration",
		Units:      "priority",
		Type:       module.Line,
		Priority:   2008,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "def_priority",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	Triggers: QueueTriggersContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.triggers",
		Family:     "queues",
		Title:      "Queue Trigger Configuration",
		Units:      "messages",
		Type:       module.Line,
		Priority:   2009,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "trigger_depth",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "trigger_type",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	BackoutThreshold: QueueBackoutThresholdContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.backout_threshold",
		Family:     "queues",
		Title:      "Queue Error Handling",
		Units:      "retries",
		Type:       module.Line,
		Priority:   2010,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "backout_threshold",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
	MaxMessageLength: QueueMaxMessageLengthContext{
		Context: framework.Context[QueueLabels]{
		Name:       "mq.queue.max_msg_length",
		Family:     "queues",
		Title:      "Queue Max Message Length",
		Units:      "bytes",
		Type:       module.Line,
		Priority:   2011,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "max_msg_length",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"queue",
			"type",
		},
		},
	},
}


// --- QueueManager ---


// QueueManagerStatusValues defines the type-safe values for QueueManager.Status context
type QueueManagerStatusValues struct {
	Status int64
}

// QueueManagerStatusContext provides type-safe operations for QueueManager.Status context
type QueueManagerStatusContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for QueueManager.Status context
func (c QueueManagerStatusContext) Set(state *framework.CollectorState, labels EmptyLabels, values QueueManagerStatusValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"status": values.Status,
	})
}

// QueueManagerConnectionCountValues defines the type-safe values for QueueManager.ConnectionCount context
type QueueManagerConnectionCountValues struct {
	Connections int64
}

// QueueManagerConnectionCountContext provides type-safe operations for QueueManager.ConnectionCount context
type QueueManagerConnectionCountContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for QueueManager.ConnectionCount context
func (c QueueManagerConnectionCountContext) Set(state *framework.CollectorState, labels EmptyLabels, values QueueManagerConnectionCountValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"connections": values.Connections,
	})
}

// QueueManagerUptimeValues defines the type-safe values for QueueManager.Uptime context
type QueueManagerUptimeValues struct {
	Uptime int64
}

// QueueManagerUptimeContext provides type-safe operations for QueueManager.Uptime context
type QueueManagerUptimeContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for QueueManager.Uptime context
func (c QueueManagerUptimeContext) Set(state *framework.CollectorState, labels EmptyLabels, values QueueManagerUptimeValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"uptime": values.Uptime,
	})
}

// QueueManagerQueuesOverviewValues defines the type-safe values for QueueManager.QueuesOverview context
type QueueManagerQueuesOverviewValues struct {
	Monitored int64
	Excluded int64
	Invisible int64
	Failed int64
}

// QueueManagerQueuesOverviewContext provides type-safe operations for QueueManager.QueuesOverview context
type QueueManagerQueuesOverviewContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for QueueManager.QueuesOverview context
func (c QueueManagerQueuesOverviewContext) Set(state *framework.CollectorState, labels EmptyLabels, values QueueManagerQueuesOverviewValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"monitored": values.Monitored,
		"excluded": values.Excluded,
		"invisible": values.Invisible,
		"failed": values.Failed,
	})
}

// QueueManagerChannelsOverviewValues defines the type-safe values for QueueManager.ChannelsOverview context
type QueueManagerChannelsOverviewValues struct {
	Monitored int64
	Excluded int64
	Invisible int64
	Failed int64
}

// QueueManagerChannelsOverviewContext provides type-safe operations for QueueManager.ChannelsOverview context
type QueueManagerChannelsOverviewContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for QueueManager.ChannelsOverview context
func (c QueueManagerChannelsOverviewContext) Set(state *framework.CollectorState, labels EmptyLabels, values QueueManagerChannelsOverviewValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"monitored": values.Monitored,
		"excluded": values.Excluded,
		"invisible": values.Invisible,
		"failed": values.Failed,
	})
}

// QueueManagerTopicsOverviewValues defines the type-safe values for QueueManager.TopicsOverview context
type QueueManagerTopicsOverviewValues struct {
	Monitored int64
	Excluded int64
	Invisible int64
	Failed int64
}

// QueueManagerTopicsOverviewContext provides type-safe operations for QueueManager.TopicsOverview context
type QueueManagerTopicsOverviewContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for QueueManager.TopicsOverview context
func (c QueueManagerTopicsOverviewContext) Set(state *framework.CollectorState, labels EmptyLabels, values QueueManagerTopicsOverviewValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"monitored": values.Monitored,
		"excluded": values.Excluded,
		"invisible": values.Invisible,
		"failed": values.Failed,
	})
}

// QueueManagerListenersOverviewValues defines the type-safe values for QueueManager.ListenersOverview context
type QueueManagerListenersOverviewValues struct {
	Monitored int64
	Excluded int64
	Invisible int64
	Failed int64
}

// QueueManagerListenersOverviewContext provides type-safe operations for QueueManager.ListenersOverview context
type QueueManagerListenersOverviewContext struct {
	framework.Context[EmptyLabels]
}

// Set provides type-safe dimension setting for QueueManager.ListenersOverview context
func (c QueueManagerListenersOverviewContext) Set(state *framework.CollectorState, labels EmptyLabels, values QueueManagerListenersOverviewValues) {
	state.SetMetricsForGeneratedCode(&c.Context, nil, map[string]int64{
		"monitored": values.Monitored,
		"excluded": values.Excluded,
		"invisible": values.Invisible,
		"failed": values.Failed,
	})
}




// QueueManager contains all metric contexts for QueueManager
var QueueManager = struct {
	Status QueueManagerStatusContext
	ConnectionCount QueueManagerConnectionCountContext
	Uptime QueueManagerUptimeContext
	QueuesOverview QueueManagerQueuesOverviewContext
	ChannelsOverview QueueManagerChannelsOverviewContext
	TopicsOverview QueueManagerTopicsOverviewContext
	ListenersOverview QueueManagerListenersOverviewContext
}{
	Status: QueueManagerStatusContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "mq.qmgr.status",
		Family:     "queue_manager",
		Title:      "Queue Manager Status",
		Units:      "status",
		Type:       module.Line,
		Priority:   1000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "status",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
	ConnectionCount: QueueManagerConnectionCountContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "mq.qmgr.connection_count",
		Family:     "queue_manager",
		Title:      "Queue Manager Connections",
		Units:      "connections",
		Type:       module.Line,
		Priority:   1001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "connections",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
	Uptime: QueueManagerUptimeContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "mq.qmgr.uptime",
		Family:     "queue_manager",
		Title:      "Queue Manager Uptime",
		Units:      "seconds",
		Type:       module.Line,
		Priority:   1002,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "uptime",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
	QueuesOverview: QueueManagerQueuesOverviewContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "mq.queues.overview",
		Family:     "overview",
		Title:      "Queues Monitoring Status",
		Units:      "queues",
		Type:       module.Stacked,
		Priority:   1100,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "monitored",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "excluded",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "invisible",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "failed",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
	ChannelsOverview: QueueManagerChannelsOverviewContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "mq.channels.overview",
		Family:     "overview",
		Title:      "Channels Monitoring Status",
		Units:      "channels",
		Type:       module.Stacked,
		Priority:   1101,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "monitored",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "excluded",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "invisible",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "failed",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
	TopicsOverview: QueueManagerTopicsOverviewContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "mq.topics.overview",
		Family:     "overview",
		Title:      "Topics Monitoring Status",
		Units:      "topics",
		Type:       module.Stacked,
		Priority:   1102,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "monitored",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "excluded",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "invisible",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "failed",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
	ListenersOverview: QueueManagerListenersOverviewContext{
		Context: framework.Context[EmptyLabels]{
		Name:       "mq.listeners.overview",
		Family:     "overview",
		Title:      "Listeners Monitoring Status",
		Units:      "listeners",
		Type:       module.Stacked,
		Priority:   1103,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "monitored",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "excluded",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "invisible",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
			{
				Name:      "failed",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
		},
	},
}


// --- Topic ---


// TopicPublishersValues defines the type-safe values for Topic.Publishers context
type TopicPublishersValues struct {
	Publishers int64
}

// TopicPublishersContext provides type-safe operations for Topic.Publishers context
type TopicPublishersContext struct {
	framework.Context[TopicLabels]
}

// Set provides type-safe dimension setting for Topic.Publishers context
func (c TopicPublishersContext) Set(state *framework.CollectorState, labels TopicLabels, values TopicPublishersValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"publishers": values.Publishers,
	})
}

// TopicSubscribersValues defines the type-safe values for Topic.Subscribers context
type TopicSubscribersValues struct {
	Subscribers int64
}

// TopicSubscribersContext provides type-safe operations for Topic.Subscribers context
type TopicSubscribersContext struct {
	framework.Context[TopicLabels]
}

// Set provides type-safe dimension setting for Topic.Subscribers context
func (c TopicSubscribersContext) Set(state *framework.CollectorState, labels TopicLabels, values TopicSubscribersValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"subscribers": values.Subscribers,
	})
}

// TopicMessagesValues defines the type-safe values for Topic.Messages context
type TopicMessagesValues struct {
	Messages int64
}

// TopicMessagesContext provides type-safe operations for Topic.Messages context
type TopicMessagesContext struct {
	framework.Context[TopicLabels]
}

// Set provides type-safe dimension setting for Topic.Messages context
func (c TopicMessagesContext) Set(state *framework.CollectorState, labels TopicLabels, values TopicMessagesValues) {
	state.SetMetricsForGeneratedCode(&c.Context, labels, map[string]int64{
		"messages": values.Messages,
	})
}



// TopicLabels defines the required labels for Topic contexts
type TopicLabels struct {
	Topic string
}

// InstanceID generates a unique instance ID using the hardcoded label order from YAML
func (l TopicLabels) InstanceID(contextName string) string {
	// Label order from YAML: topic
	return contextName + "." + cleanLabelValue(l.Topic)
}


// Topic contains all metric contexts for Topic
var Topic = struct {
	Publishers TopicPublishersContext
	Subscribers TopicSubscribersContext
	Messages TopicMessagesContext
}{
	Publishers: TopicPublishersContext{
		Context: framework.Context[TopicLabels]{
		Name:       "mq.topic.publishers",
		Family:     "topics",
		Title:      "Topic Publishers",
		Units:      "publishers",
		Type:       module.Line,
		Priority:   4000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "publishers",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"topic",
		},
		},
	},
	Subscribers: TopicSubscribersContext{
		Context: framework.Context[TopicLabels]{
		Name:       "mq.topic.subscribers",
		Family:     "topics",
		Title:      "Topic Subscribers",
		Units:      "subscribers",
		Type:       module.Line,
		Priority:   4001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "subscribers",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"topic",
		},
		},
	},
	Messages: TopicMessagesContext{
		Context: framework.Context[TopicLabels]{
		Name:       "mq.topic.messages",
		Family:     "topics",
		Title:      "Topic Message Rate",
		Units:      "messages/s",
		Type:       module.Line,
		Priority:   4002,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "messages",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"topic",
		},
		},
	},
}



// GetAllContexts returns all contexts for framework registration
func GetAllContexts() []interface{} {
	return []interface{}{
		&Channel.Status.Context,
		&Channel.Messages.Context,
		&Channel.Bytes.Context,
		&Channel.Batches.Context,
		&Channel.BatchSize.Context,
		&Channel.BatchInterval.Context,
		&Channel.Intervals.Context,
		&Channel.ShortRetryCount.Context,
		&Channel.LongRetryInterval.Context,
		&Channel.MaxMessageLength.Context,
		&Channel.SharingConversations.Context,
		&Channel.NetworkPriority.Context,
		&Listener.Status.Context,
		&Listener.Port.Context,
		&Queue.Depth.Context,
		&Queue.Messages.Context,
		&Queue.Connections.Context,
		&Queue.HighDepth.Context,
		&Queue.OldestMessageAge.Context,
		&Queue.UncommittedMessages.Context,
		&Queue.LastActivity.Context,
		&Queue.InhibitStatus.Context,
		&Queue.Priority.Context,
		&Queue.Triggers.Context,
		&Queue.BackoutThreshold.Context,
		&Queue.MaxMessageLength.Context,
		&QueueManager.Status.Context,
		&QueueManager.ConnectionCount.Context,
		&QueueManager.Uptime.Context,
		&QueueManager.QueuesOverview.Context,
		&QueueManager.ChannelsOverview.Context,
		&QueueManager.TopicsOverview.Context,
		&QueueManager.ListenersOverview.Context,
		&Topic.Publishers.Context,
		&Topic.Subscribers.Context,
		&Topic.Messages.Context,
	}
}
