## netdata configuration for IBM DB2 monitoring
## https://github.com/netdata/netdata/tree/master/src/go/plugin/ibm.d/collector/db2#configuration

## This collector monitors IBM DB2 databases across all editions:
## - DB2 LUW (Linux, Unix, Windows)
## - DB2 for z/OS
## - DB2 for i (AS/400)
## - Db2 on Cloud
## It requires the ibm.d.plugin (not the regular go.d.plugin) because it needs
## CGO and IBM DB2 client libraries.

## Prerequisites:
## 1. IBM DB2 client libraries must be installed
## 2. IBM_DB_HOME environment variable must be set
## 3. LD_LIBRARY_PATH must include DB2 library path
## 4. Database user must have SELECT permissions on SYSIBMADM schema views

#------------------------------------------------------------------------------
# JOBS (data collection sources)

## Each job represents a connection to a DB2 database.
## You can define multiple jobs to monitor multiple databases.

jobs:
  ## Example: Basic DB2 connection
  ## Uncomment and modify the following example:
  
  # - name: db2_production
  #   # Data Source Name (DSN) for IBM DB2 connection
  #   # Required: yes
  #   dsn: 'DATABASE=sample;HOSTNAME=localhost;PORT=50000;PROTOCOL=TCPIP;UID=db2inst1;PWD=password'
  #   
  #   # Update interval in seconds
  #   # Default: 5
  #   update_every: 5
  #   
  #   # Connection timeout
  #   # Default: 2
  #   timeout: 2
  #   
  #   # Maximum database connections
  #   # Default: 1
  #   max_db_conns: 1
  #   
  #   # Maximum database connection lifetime
  #   # Default: 10m
  #   max_db_conn_lifetime: 10m

  ## Example: SSL connection (Db2 on Cloud)
  # - name: db2_cloud
  #   dsn: 'DATABASE=bludb;HOSTNAME=xxx.databases.appdomain.cloud;PORT=32733;PROTOCOL=TCPIP;UID=user;PWD=pass;SECURITY=SSL;SSLServerCertificate=/path/to/cert.crt'
  #   timeout: 5

  ## Example: Large database with cardinality control
  ## Use this configuration for databases with many objects to prevent
  ## excessive memory usage and chart creation
  
  # - name: db2_large
  #   dsn: 'DATABASE=warehouse;HOSTNAME=db2.example.com;PORT=50000;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   
  #   # Per-instance metric collection settings
  #   # These control which detailed metrics are collected
  #   
  #   # Collect per-database metrics
  #   # Default: true
  #   collect_database_metrics: true
  #   
  #   # Maximum number of databases to monitor
  #   # Default: 10 (0 = unlimited)
  #   max_databases: 10
  #   
  #   # Pattern to filter databases. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Example: 'PROD*' to monitor only production databases, '*TEST*|*DEV*' for test or dev
  #   # Default: '' (all databases)
  #   collect_databases_matching: ''
  #   
  #   # Collect buffer pool metrics
  #   # Default: true
  #   collect_bufferpool_metrics: true
  #   
  #   # Maximum number of buffer pools to monitor
  #   # Default: 20 (0 = unlimited)
  #   max_bufferpools: 20
  #   
  #   # Pattern to filter buffer pools. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Default: '' (all buffer pools)
  #   collect_bufferpools_matching: ''
  #   
  #   # Collect tablespace metrics
  #   # Default: true
  #   collect_tablespace_metrics: true
  #   
  #   # Maximum number of tablespaces to monitor
  #   # Default: 100 (0 = unlimited)
  #   max_tablespaces: 50
  #   
  #   # Pattern to filter tablespaces. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Example: 'USER*' to monitor only user tablespaces, '*TEMP*' for temporary tablespaces
  #   # Default: '' (all tablespaces)
  #   collect_tablespaces_matching: ''
  #   
  #   # Collect connection metrics
  #   # Default: true
  #   collect_connection_metrics: true
  #   
  #   # Maximum number of connections to monitor
  #   # Default: 200 (0 = unlimited)
  #   max_connections: 100
  #   
  #   # Pattern to filter connections by application name. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Example: '*jdbc*' to monitor only JDBC connections, '*java*|*python*' for Java or Python
  #   # Default: '' (all connections)
  #   collect_connections_matching: ''
  #   
  #   # Virtual node (vnode) assignment
  #   # Associates this job with a Virtual Node in Netdata Cloud
  #   # Default: not set
  #   # vnode: 'db2-warehouse'

  ## Example: Minimal monitoring (global metrics only)
  ## Use this for basic monitoring without per-instance details
  
  # - name: db2_minimal
  #   dsn: 'DATABASE=sample;HOSTNAME=localhost;PORT=50000;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # Disable all per-instance metrics
  #   collect_database_metrics: false
  #   collect_bufferpool_metrics: false
  #   collect_tablespace_metrics: false
  #   collect_connection_metrics: false

  ## Example: Filtered collection
  ## Monitor specific database objects using SQL LIKE patterns
  
  # - name: db2_filtered
  #   dsn: 'DATABASE=sample;HOSTNAME=localhost;PORT=50000;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # Monitor only production databases
  #   collect_databases_matching: 'PROD*'
  #   
  #   # Monitor only system buffer pools
  #   collect_bufferpools_matching: 'IBMSYSTEM*'
  #   
  #   # Monitor only user tablespaces
  #   collect_tablespaces_matching: 'USER*'
  #   
  #   # Monitor only Java applications
  #   collect_connections_matching: '*java*'

  ## Example: DB2 for z/OS
  # - name: db2_zos
  #   dsn: 'DATABASE=DB2P;HOSTNAME=mainframe.example.com;PORT=446;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # z/OS often has different default ports and may require specific settings
  #   timeout: 10

  ## Example: DB2 for i (AS/400)
  # - name: db2_iseries
  #   dsn: 'DATABASE=;HOSTNAME=as400.example.com;PORT=446;PROTOCOL=TCPIP;UID=monitor;PWD=secret'
  #   # Note: DATABASE is often empty for DB2 for i connections

#------------------------------------------------------------------------------
# COLLECTED METRICS

## Global metrics (always collected):
## - Database connections (total, active, executing, idle)
## - Lock waits, timeouts, deadlocks
## - Sort operations and overflows
## - Row activity (reads, inserts, updates, deletes)
## - Buffer pool hit ratios (aggregate)
## - Log space usage

## Per-database metrics (when collect_database_metrics is true):
## - Database status
## - Application connections count
## - Lock waits and deadlocks
## - Row activity
## - Log space used

## Per-buffer-pool metrics (when collect_bufferpool_metrics is true):
## - Hit ratio (data, index, XDA)
## - Page reads/writes (logical and physical)
## - Page usage statistics
## - Prefetch statistics

## Per-tablespace metrics (when collect_tablespace_metrics is true):
## - Usage percentage
## - Total/used/free size
## - Page size
## - State (normal, backup pending, etc.)

## Per-connection metrics (when collect_connection_metrics is true):
## - Connection state
## - Rows read/written
## - CPU time used
## - Application handle

#------------------------------------------------------------------------------
# TROUBLESHOOTING

## 1. "error loading shared libraries: libdb2.so"
##    - Ensure LD_LIBRARY_PATH includes DB2 client library path
##    - For systemd services, add to the service file:
##      Environment="LD_LIBRARY_PATH=/path/to/db2/lib"

## 2. "SQL1042C An unexpected system error occurred"
##    - Check DB2 client version compatibility with server
##    - Verify network connectivity and firewall rules
##    - For SSL connections, verify certificate path

## 3. "SQL1032N No start database manager command was issued"
##    - Ensure DB2 instance is running on the server
##    - Check with: db2 list active databases

## 4. Certificate errors with SSL connections
##    - Use absolute paths for SSLServerCertificate
##    - Ensure certificate is in PEM format
##    - Check file permissions (readable by netdata user)
##    - For Db2 on Cloud, download certificate from IBM Cloud console

## 5. Permission denied errors
##    - Grant monitoring permissions:
##      GRANT SELECT ON SYSIBMADM.APPLICATIONS TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.SNAPDB TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.SNAPBP TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.TBSP_UTILIZATION TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.LOG_UTILIZATION TO monitor_user;
##      GRANT SELECT ON SYSIBMADM.ENV_INST_INFO TO monitor_user;

## 6. High cardinality warnings
##    - Reduce max_databases, max_bufferpools, max_tablespaces, max_connections
##    - Use filtering patterns to monitor only important objects

#------------------------------------------------------------------------------
# TESTING YOUR CONFIGURATION

## To test this collector, run as netdata user:
## cd /usr/libexec/netdata/plugins.d/
## sudo -u netdata -s
## export IBM_DB_HOME=/path/to/db2/client
## export LD_LIBRARY_PATH=$IBM_DB_HOME/lib:$LD_LIBRARY_PATH
## ./ibm.d.plugin -d -m db2

## To test DB2 connectivity independently:
## $IBM_DB_HOME/bin/db2cli validate -dsn "your-dsn-string-here"

#------------------------------------------------------------------------------
# PERFORMANCE CONSIDERATIONS

## 1. Connection pooling: The collector maintains a connection pool. Adjust
##    max_db_conns based on your database's connection limits.

## 2. Query frequency: Each metric type runs its own query. With many instances,
##    this can create significant load. Consider:
##    - Increasing update_every for less critical databases
##    - Disabling per-instance metrics for non-production databases
##    - Using filtering to monitor only critical objects

## 3. Memory usage: Each monitored instance creates charts and dimensions.
##    With hundreds of tablespaces or connections, memory usage can grow.
##    Use the max_* settings to limit cardinality.

## 4. Network latency: For remote databases, consider:
##    - Increasing timeout values
##    - Running a local netdata node closer to the database
##    - Using connection compression if supported