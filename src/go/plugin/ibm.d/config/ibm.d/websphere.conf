## netdata configuration for IBM WebSphere Application Server monitoring
## https://github.com/netdata/netdata/tree/master/src/go/plugin/ibm.d/collector/websphere#configuration

## This collector monitors IBM WebSphere Application Server instances, including:
## - WebSphere Liberty (using REST API)
## - WebSphere Traditional (future: JMX support)
##
## It requires the ibm.d.plugin (not the regular go.d.plugin) because it's part
## of the IBM ecosystem collectors that may require CGO and IBM libraries.

## Prerequisites:
## 1. For Liberty: Enable monitor-1.0 feature in server.xml
## 2. Create a monitoring user with appropriate role
## 3. IBM DB2 client libraries must be installed (for ibm.d.plugin)
## 4. LD_LIBRARY_PATH must include DB2 library path

#------------------------------------------------------------------------------
# JOBS (data collection sources)

## Each job represents a connection to a WebSphere server.
## You can define multiple jobs to monitor multiple servers.

jobs:
  ## Example: Basic WebSphere Liberty server
  ## Uncomment and modify the following example:
  
  # - name: liberty_local
  #   # WebSphere server URL
  #   # Required: yes
  #   url: https://localhost:9443
  #   
  #   # Update interval in seconds
  #   # Default: 5
  #   update_every: 5
  #   
  #   # HTTP request timeout
  #   # Default: 5
  #   timeout: 5
  #   
  #   # Basic authentication credentials
  #   # Liberty: User needs administrator or reader role
  #   username: admin
  #   password: adminpwd
  #   
  #   # Liberty metrics API endpoint
  #   # Default: /ibm/api/metrics
  #   metrics_endpoint: /ibm/api/metrics

  ## Example: Production server with TLS
  # - name: liberty_production
  #   url: https://prod.example.com:9443
  #   username: monitor
  #   password: secret
  #   # Skip TLS verification (not recommended for production)
  #   tls_skip_verify: false
  #   # Or provide CA certificate
  #   tls_ca: /path/to/ca.crt

  ## Example: Using client certificate authentication
  # - name: liberty_secure
  #   url: https://secure.example.com:9443
  #   tls_cert: /path/to/client.crt
  #   tls_key: /path/to/client.key
  #   tls_ca: /path/to/ca.crt

  ## Example: Large environment with cardinality control
  ## Use this configuration for servers with many applications and pools
  ## to prevent excessive memory usage and chart creation
  
  # - name: liberty_large
  #   url: https://large.example.com:9443
  #   username: monitor
  #   password: secret
  #   
  #   # Metric collection settings
  #   # These control which metrics are collected
  #   
  #   # Collect JVM metrics (heap, GC, threads, classes)
  #   # Default: true
  #   collect_jvm_metrics: true
  #   
  #   # Collect thread pool metrics
  #   # Default: true
  #   collect_threadpool_metrics: true
  #   
  #   # Collect connection pool metrics (JDBC, JMS, etc.)
  #   # Default: true
  #   collect_connectionpool_metrics: true
  #   
  #   # Collect web application metrics
  #   # Default: true
  #   collect_webapp_metrics: true
  #   
  #   # Collect HTTP session metrics
  #   # Default: true
  #   collect_session_metrics: true
  #   
  #   # Cardinality limits
  #   
  #   # Maximum number of thread pools to monitor
  #   # Default: 20 (0 = unlimited)
  #   max_threadpools: 20
  #   
  #   # Maximum number of connection pools to monitor
  #   # Default: 20 (0 = unlimited)
  #   max_connectionpools: 20
  #   
  #   # Maximum number of applications to monitor
  #   # Default: 50 (0 = unlimited)
  #   max_applications: 30
  #   
  #   # Pattern to filter applications by name. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Example: '*myapp*' to monitor only applications containing 'myapp', 'prod-*|staging-*' for prod or staging
  #   # Default: '' (all applications)
  #   collect_apps_matching: ''
  #   
  #   # Pattern to filter pools by name. Supports wildcards (*, ?) and multiple patterns separated by |
  #   # Example: '*jdbc*' to monitor only JDBC pools, '*Default*|*Custom*' for default or custom pools
  #   # Default: '' (all pools)
  #   collect_pools_matching: ''
  #   
  #   # Virtual node (vnode) assignment
  #   # Associates this job with a Virtual Node in Netdata Cloud
  #   # Default: not set
  #   # vnode: 'websphere-cluster1'

  ## Example: Minimal monitoring (JVM only)
  ## Use this for basic monitoring with minimal overhead
  
  # - name: liberty_minimal
  #   url: https://minimal.example.com:9443
  #   username: monitor
  #   password: secret
  #   # Disable all per-instance metrics
  #   collect_threadpool_metrics: false
  #   collect_connectionpool_metrics: false
  #   collect_webapp_metrics: false
  #   collect_session_metrics: false

  ## Example: Filtered collection
  ## Monitor specific applications and pools
  
  # - name: liberty_filtered
  #   url: https://filtered.example.com:9443
  #   username: monitor
  #   password: secret
  #   # Monitor only production applications
  #   collect_apps_matching: prod
  #   # Monitor only JDBC connection pools
  #   collect_pools_matching: jdbc
  #   # Increase limits since we're filtering
  #   max_applications: 0  # No limit
  #   max_connectionpools: 0  # No limit

  ## Example: Clustered environment
  ## For Network Deployment environments (future enhancement)
  
  # - name: was_cluster
  #   url: https://dmgr.example.com:9043
  #   username: wasadmin
  #   password: wasadmin
  #   # Identify specific server in cell
  #   cell_name: cell01
  #   node_name: node01
  #   server_name: server01

#------------------------------------------------------------------------------
# COLLECTED METRICS

## Global metrics (always collected):
## - JVM heap usage (used, committed, max)
## - Garbage collection time and count
## - Thread count (total, daemon, peak)
## - Loaded/unloaded classes
## - Web sessions (active, live, invalidated)
## - Total web requests
## - Web errors (4xx, 5xx) - if available

## Per-thread-pool metrics (when collect_threadpool_metrics is true):
## - Pool size and maximum
## - Active threads
## - Hung threads

## Per-connection-pool metrics (when collect_connectionpool_metrics is true):
## - Pool size, free connections, maximum
## - Average wait time
## - Connection timeouts

## Per-application metrics (when collect_webapp_metrics is true):
## - Request count
## - Average response time
## - Error count

#------------------------------------------------------------------------------
# TROUBLESHOOTING

## 1. "Connection refused" or timeout errors
##    - Verify WebSphere is running and the port is correct
##    - Check firewall rules
##    - For Liberty, ensure monitor-1.0 feature is enabled

## 2. "401 Unauthorized"
##    - Verify username and password
##    - Check user has appropriate role:
##      * Liberty: administrator or reader role
##      * Traditional: monitor role
##    - Check WebSphere security configuration

## 3. "404 Not Found" for metrics endpoint
##    - Verify metrics_endpoint path (default: /ibm/api/metrics)
##    - Ensure monitor-1.0 feature is enabled in Liberty server.xml:
##      <featureManager>
##          <feature>monitor-1.0</feature>
##      </featureManager>

## 4. Certificate errors
##    - For self-signed certificates, use: tls_skip_verify: true (not for production!)
##    - Provide proper CA certificate with tls_ca option
##    - Ensure certificate paths are absolute and readable

## 5. High memory usage
##    - Reduce max_applications, max_threadpools, max_connectionpools
##    - Use filtering to monitor only critical resources
##    - Increase update_every to reduce collection frequency

## 6. Missing metrics
##    - Check if specific features are enabled in WebSphere
##    - Verify user has permissions to access monitoring data
##    - Some metrics may not be available in all WebSphere versions

#------------------------------------------------------------------------------
# TESTING YOUR CONFIGURATION

## To test this collector, run as netdata user:
## cd /usr/libexec/netdata/plugins.d/
## sudo -u netdata -s
## export IBM_DB_HOME=/path/to/db2/client
## export LD_LIBRARY_PATH=$IBM_DB_HOME/lib:$LD_LIBRARY_PATH
## ./ibm.d.plugin -d -m websphere

## To test WebSphere connectivity independently:
## curl -k -u admin:adminpwd https://localhost:9443/ibm/api/metrics

#------------------------------------------------------------------------------
# PERFORMANCE CONSIDERATIONS

## 1. Collection frequency: Each update queries the metrics API. For large
##    environments with many servers, consider:
##    - Increasing update_every for less critical servers
##    - Using multiple Netdata nodes for different server groups

## 2. Cardinality: Each application, pool creates multiple charts. With hundreds
##    of applications, this can impact:
##    - Memory usage
##    - Dashboard performance
##    - Storage requirements
##    Use max_* settings and filtering to control cardinality.

## 3. Network impact: The metrics API returns all available metrics. For remote
##    servers over slow links:
##    - Consider running Netdata locally on the WebSphere server
##    - Increase timeout values for reliability

## 4. Authentication overhead: Each request requires authentication. Consider:
##    - Using connection keep-alive (handled automatically)
##    - Using certificate authentication instead of basic auth

#------------------------------------------------------------------------------
# WEBSPHERE LIBERTY SPECIFIC NOTES

## The monitor-1.0 feature must be enabled in server.xml:
## <server>
##     <featureManager>
##         <feature>monitor-1.0</feature>
##     </featureManager>
##     
##     <!-- Optional: Configure monitoring -->
##     <monitor filter="JVM,ThreadPool,WebContainer,Session" />
## </server>

## For production use, create a dedicated monitoring user:
## <server>
##     <basicRegistry>
##         <user name="monitor" password="encoded_password" />
##     </basicRegistry>
##     <administrator-role>
##         <user>monitor</user>
##     </administrator-role>
## </server>