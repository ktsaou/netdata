// Code generated by metricgen; DO NOT EDIT.
// source: contexts.yaml

package contexts

import (
	"strings"
	"github.com/netdata/netdata/go/plugins/plugin/ibm.d/framework"
	"github.com/netdata/netdata/go/plugins/plugin/go.d/agent/module"
)

// cleanLabelValue cleans a label value for use in instance/dimension IDs
func cleanLabelValue(value string) string {
	// Replace problematic characters
	r := strings.NewReplacer(
		" ", "_",
		".", "_",
		"-", "_",
		"/", "_",
		":", "_",
		"=", "_",
		",", "_",
		"(", "_",
		")", "_",
	)
	return strings.ToLower(r.Replace(value))
}

// emptyLabels is used for contexts without labels
type emptyLabels struct{}

// InstanceID for empty labels just returns the context name
func (emptyLabels) InstanceID(contextName string) string {
	return contextName
}


// --- Item ---


// ItemLabels defines the required labels for Item contexts
type ItemLabels struct {
	Slot string
}

// InstanceID generates a unique instance ID using the hardcoded label order from YAML
func (l ItemLabels) InstanceID(contextName string) string {
	// Label order from YAML: slot
	return contextName + "." + cleanLabelValue(l.Slot)
}


// Item contains all metric contexts for Item
var Item = struct {
	ItemPercentage framework.Context[ItemLabels]
	ItemCounter framework.Context[ItemLabels]
}{
	ItemPercentage: framework.Context[ItemLabels]{
		Name:       "example.item_percentage",
		Family:     "items",
		Title:      "Item Percentage",
		Units:      "percentage",
		Type:       module.Stacked,
		Priority:   2000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "percentage",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"slot",
		},
	},
	ItemCounter: framework.Context[ItemLabels]{
		Name:       "example.item_counter",
		Family:     "items",
		Title:      "Item Counter",
		Units:      "count/s",
		Type:       module.Line,
		Priority:   2001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "counter",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
			"slot",
		},
	},
}


// --- Test ---



// Test contains all metric contexts for Test
var Test = struct {
	TestAbsolute framework.Context[emptyLabels]
	TestIncremental framework.Context[emptyLabels]
}{
	TestAbsolute: framework.Context[emptyLabels]{
		Name:       "example.test_absolute",
		Family:     "test",
		Title:      "Test Absolute Value (timestamp % 60)",
		Units:      "seconds",
		Type:       module.Line,
		Priority:   1000,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "value",
				Algorithm: module.Absolute,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
	},
	TestIncremental: framework.Context[emptyLabels]{
		Name:       "example.test_incremental",
		Family:     "test",
		Title:      "Test Incremental Counter",
		Units:      "count/s",
		Type:       module.Line,
		Priority:   1001,
		UpdateEvery: 1,
		Dimensions: []framework.Dimension{
			{
				Name:      "counter",
				Algorithm: module.Incremental,
				Mul:       1,
				Div:       1,
				Precision: 1,
			},
		},
		LabelKeys: []string{
		},
	},
}



// GetAllContexts returns all contexts for framework registration
func GetAllContexts() []interface{} {
	return []interface{}{
		&Item.ItemPercentage,
		&Item.ItemCounter,
		&Test.TestAbsolute,
		&Test.TestIncremental,
	}
}
