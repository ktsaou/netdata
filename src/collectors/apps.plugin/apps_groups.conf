#
# apps.plugin process grouping
#
# apps.plugin does 3 kinds of grouping:
#
# 1. Tree: processes are grouped by their position in the process tree
# 2. User: processes are grouped by their effective UID (username)
# 3. Group: processes are grouped by their effective GID (groupname)
#
# This configuration affects only the 1st grouping (Tree).
#
# Tree is using a list of known process managers (like init, systemd, etc),
# to identify the process groups that is reasonable to report.
#
# The list of process managers can be configured here (uncomment and edit):

# Linux
managers: init systemd containerd-shim dumb-init gnome-shell

# FreeBSD
managers: init

# MacOS
managers: launchd

# Windows
managers: System services wininit

# All processes that have as PPID one of the above, will be reported individually.
#
# Then, apps.plugin allows configuring "processes of interest", which should be
# reported, independently of their position in the process tree.
#
# To configure "processes of interest", use this format:
#
#       group: process1 process2 process3 ...
#
# Each group can be given multiple times, to add more processes to it.
#
# The process names are the ones returned by:
#
#  -  ps -e or cat /proc/PID/stat
#  -  in case of substring mode (see below): /proc/PID/cmdline
#
# To add process names with spaces, enclose them in quotes (single or double)
# example: 'Plex Media Serv' "my other process".
#
# Note that spaces are not supported for process groups. Use a dash "-" instead.
# example-process-group: process1 process2
#
# Wildcard support:
# You can add an asterisk (*) at the beginning and/or the end of a process:
#
#  *process   suffix mode: will search for processes ending with 'name'
#             (/proc/PID/stat)
#
#   process*  prefix mode: will search for processes beginning with 'name'
#             (/proc/PID/stat)
#
#  *process*  substring mode: will search for 'name' in the whole command line
#             (/proc/PID/cmdline)
#
# If you enter even just one *process* (substring), apps.plugin will process
# /proc/PID/cmdline for all processes, just once (when they are first seen).
#
# To add processes with single quotes, enclose them in double quotes
# example: "process with this ' single quote"
#
# To add processes with double quotes, enclose them in single quotes:
# example: 'process with this " double quote'
#
# If a group or process name starts with a -, the dimension will be hidden
# (cpu chart only).
#
# If a group or process name starts with a +, debugging will be enabled for it
# (this produces a lot of output, so do not enable it in production systems).
#
# You can add any number of groups you like. Only the ones found running will
# affect the charts generated. However, producing charts with hundreds of
# dimensions may slow down your web browser.
#
# The order of the entries in this list is important: the first that matches
# a process is used, so put important ones at the top. Processes not matched
# by any row, will inherit it from their parents or children.
#
# The order also controls the order of the dimensions on the generated charts
# (although applications started after apps.plugin is started, will be appended
# to the existing list of dimensions the netdata daemon maintains).

# -----------------------------------------------------------------------------
# NETDATA processes accounting

# netdata main process
netdata: netdata

# netdata known plugins
# plugins not defined here will be accumulated into netdata, above
apps.plugin: *apps.plugin*
freeipmi.plugin: *freeipmi.plugin*
nfacct.plugin: *nfacct.plugin*
cups.plugin: *cups.plugin*
xenstat.plugin: *xenstat.plugin*
perf.plugin: *perf.plugin*
charts.d.plugin: *charts.d.plugin*
python.d.plugin: *python.d.plugin*
systemd-journal.plugin: *systemd-journal.plugin*
network-viewer.plugin: *network-viewer.plugin*
windows-events.plugin: *windows-events.plugin*
tc-qos-helper: *tc-qos-helper.sh*
fping: fping
ioping: ioping
go.d.plugin: *go.d.plugin*
slabinfo.plugin: *slabinfo.plugin*
ebpf.plugin: *ebpf.plugin*
debugfs.plugin: *debugfs.plugin*

# agent-service-discovery
agent_sd: agent_sd

# -----------------------------------------------------------------------------

unicorn: *unicorn*
puma: *puma*
couchdb: *couchdb*
graphite: *carbon-cache.py* *carbon-aggregator.py* *graphite/manage.py*
opentsdb: *net.opentsdb.tools.TSDMain*
imapd: *imapd
pop3d: *pop3d
popd: *popd
camo: *camo*
vicidial: *vicidial*
vines: *vines*
prosody: *prosody*
azure: mdsd *waagent* *omiserver* *omiagent* hv_kvp_daemon hv_vss_daemon *auoms* *omsagent*
datadog: *datadog*
newrelic: newrelic*
google-agent: *google_guest_agent* *google_osconfig_agent*
ceph: ceph-* ceph_* radosgw* rbd-* cephfs-* osdmaptool crushtool
samba: smbd nmbd winbindd ctdbd ctdb-* ctdb_*
nfs: rpcbind rpc.* nfs*
zfs: spl_* z_* txg_* zil_* arc_* l2arc*
iscsi: iscsid iscsi_eh
afp: netatalk afpd cnid_dbd cnid_metad
aws-s3: '*aws s3*' s3cmd s5cmd
proxmox-ve: pve* spiceproxy
libvirt: virtlogd virtqemud virtstoraged virtnetworkd virtlockd virtinterfaced
libvirt: virtnodedevd virtproxyd virtsecretd libvirtd
guest-agent: qemu-ga spice-vdagent cloud-init*
dhcp: *dhcp* dhclient

build: cc1 cc1plus as gcc* cppcheck ld make cmake automake autoconf autoreconf
build: cargo rustc bazel buck git gdb valgrind* rpmbuild dpkg-buildpackage
packagemanager: apt* dpkg* dselect dnf yum rpm zypp* yast* pacman xbps* swupd* emerge*
packagemanager: packagekitd pkgin pkg apk snapd slackpkg slapt-get
clam: clam* *clam
backup: rsync lsyncd bacula* borg rclone
cron: cron* atd anacron *systemd-cron* incrond
ups: upsmon upsd */nut/* apcupsd
audio: pulse* pipewire wireplumber jack*

rabbitmq: *rabbitmq*
sidekiq: *sidekiq*
erlang: beam.smp

# -----------------------------------------------------------------------------
# java applications

hdfsdatanode: *org.apache.hadoop.hdfs.server.datanode.DataNode*
hdfsnamenode: *org.apache.hadoop.hdfs.server.namenode.NameNode*
hdfsjournalnode: *org.apache.hadoop.hdfs.qjournal.server.JournalNode*
hdfszkfc: *org.apache.hadoop.hdfs.tools.DFSZKFailoverController*
yarnnode: *org.apache.hadoop.yarn.server.nodemanager.NodeManager*
yarnmgr: *org.apache.hadoop.yarn.server.resourcemanager.ResourceManager*
yarnproxy: *org.apache.hadoop.yarn.server.webproxy.WebAppProxyServer*
sparkworker: *org.apache.spark.deploy.worker.Worker*
sparkmaster: *org.apache.spark.deploy.master.Master*
hbaseregion: *org.apache.hadoop.hbase.regionserver.HRegionServer*
hbaserest: *org.apache.hadoop.hbase.rest.RESTServer*
hbasethrift: *org.apache.hadoop.hbase.thrift.ThriftServer*
hbasemaster: *org.apache.hadoop.hbase.master.HMaster*
zookeeper: *org.apache.zookeeper.server.quorum.QuorumPeerMain*
hive2: *org.apache.hive.service.server.HiveServer2*
hivemetastore: *org.apache.hadoop.hive.metastore.HiveMetaStore*
solr: *solr.install.dir*
airflow: *airflow*
kafka: *kafka.Kafka*

# -----------------------------------------------------------------------------
# Kernel / System

ksmd: ksmd
khugepaged: khugepaged
kdamond: kdamond
kswapd: kswapd
zswap: zswap
kcompactd: kcompactd
ipvs: ipvs_*
btrfs: btrfs*
