// SPDX-License-Identifier: GPL-3.0-or-later

package db2

const (
	// Edition detection queries - each targets specific edition characteristics
	queryDetectVersionLUW = `SELECT SERVICE_LEVEL FROM SYSIBMADM.ENV_INST_INFO`
	queryDetectVersionI   = `SELECT 'DB2 for i' FROM SYSIBM.SYSDUMMY1 WHERE EXISTS (SELECT 1 FROM QSYS2.SYSTABLES WHERE TABLE_SCHEMA = 'QSYS2' FETCH FIRST 1 ROW ONLY)`
	queryDetectVersionZOS = `SELECT VERSION FROM SYSIBM.SYSVERSIONS WHERE VERSION_TYPE = 'DB2'`
	// Try multiple methods to detect Db2 on Cloud
	queryDetectVersionCloud    = `SELECT 'Db2 on Cloud' FROM SYSIBM.SYSDUMMY1 WHERE EXISTS (SELECT 1 FROM SYSCAT.TABLES WHERE TABSCHEMA = 'BLUADMIN' AND TABNAME = 'BLUADMIN_CLOUD_CONTROLS')`
	queryDetectVersionCloudAlt = `SELECT CASE WHEN PROD_RELEASE LIKE '%Cloud%' THEN 'Db2 on Cloud' ELSE NULL END FROM TABLE(SYSPROC.ENV_GET_INST_INFO()) FETCH FIRST 1 ROW ONLY`

	queryLockMetrics = `
		SELECT 
			LOCK_WAITS,
			LOCK_TIMEOUTS,
			DEADLOCKS,
			LOCK_ESCALS,
			LOCKS_HELD as LOCK_ACTIVE,
			LOCK_WAIT_TIME,
			LOCKS_WAITING as LOCK_WAITING_AGENTS,
			LOCK_LIST_IN_USE as LOCK_MEMORY_PAGES,
			TOTAL_SORTS,
			SORT_OVERFLOWS,
			ROWS_READ,
			ROWS_MODIFIED,
			ROWS_SELECTED as ROWS_RETURNED
		FROM SYSIBMADM.SNAPDB
	`

	queryBufferpoolAggregateMetrics = `
		SELECT 
			CASE 
				WHEN (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) > 0 
				THEN ((POOL_DATA_LBP_PAGES_FOUND + POOL_INDEX_LBP_PAGES_FOUND + POOL_XDA_LBP_PAGES_FOUND + POOL_COL_LBP_PAGES_FOUND) * 100) / 
				     (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS)
				ELSE 100 
			END as HIT_RATIO,
			CASE 
				WHEN POOL_DATA_L_READS > 0 
				THEN (POOL_DATA_LBP_PAGES_FOUND * 100) / POOL_DATA_L_READS
				ELSE 100 
			END as DATA_HIT_RATIO,
			CASE 
				WHEN POOL_INDEX_L_READS > 0 
				THEN (POOL_INDEX_LBP_PAGES_FOUND * 100) / POOL_INDEX_L_READS
				ELSE 100 
			END as INDEX_HIT_RATIO,
			CASE 
				WHEN POOL_XDA_L_READS > 0 
				THEN (POOL_XDA_LBP_PAGES_FOUND * 100) / POOL_XDA_L_READS
				ELSE 100 
			END as XDA_HIT_RATIO,
			CASE 
				WHEN POOL_COL_L_READS > 0 
				THEN (POOL_COL_LBP_PAGES_FOUND * 100) / POOL_COL_L_READS
				ELSE 100 
			END as COLUMN_HIT_RATIO,
			SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) as LOGICAL_READS,
			SUM(POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS) as PHYSICAL_READS,
			SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS + 
			    POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS) as TOTAL_READS,
			-- Detailed read metrics
			SUM(POOL_DATA_L_READS) as DATA_LOGICAL_READS,
			SUM(POOL_DATA_P_READS) as DATA_PHYSICAL_READS,
			SUM(POOL_DATA_L_READS + POOL_DATA_P_READS) as DATA_TOTAL_READS,
			SUM(POOL_INDEX_L_READS) as INDEX_LOGICAL_READS,
			SUM(POOL_INDEX_P_READS) as INDEX_PHYSICAL_READS,
			SUM(POOL_INDEX_L_READS + POOL_INDEX_P_READS) as INDEX_TOTAL_READS,
			SUM(POOL_XDA_L_READS) as XDA_LOGICAL_READS,
			SUM(POOL_XDA_P_READS) as XDA_PHYSICAL_READS,
			SUM(POOL_XDA_L_READS + POOL_XDA_P_READS) as XDA_TOTAL_READS,
			SUM(POOL_COL_L_READS) as COLUMN_LOGICAL_READS,
			SUM(POOL_COL_P_READS) as COLUMN_PHYSICAL_READS,
			SUM(POOL_COL_L_READS + POOL_COL_P_READS) as COLUMN_TOTAL_READS
		FROM SYSIBMADM.SNAPBP
	`

	// Legacy aggregate buffer pool query without column-organized metrics
	queryBufferpoolAggregateMetricsLegacy = `
		SELECT 
			CASE 
				WHEN (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS) > 0 
				THEN ((POOL_DATA_LBP_PAGES_FOUND + POOL_INDEX_LBP_PAGES_FOUND + POOL_XDA_LBP_PAGES_FOUND) * 100) / 
				     (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS)
				ELSE 100 
			END as HIT_RATIO,
			CASE 
				WHEN POOL_DATA_L_READS > 0 
				THEN (POOL_DATA_LBP_PAGES_FOUND * 100) / POOL_DATA_L_READS
				ELSE 100 
			END as DATA_HIT_RATIO,
			CASE 
				WHEN POOL_INDEX_L_READS > 0 
				THEN (POOL_INDEX_LBP_PAGES_FOUND * 100) / POOL_INDEX_L_READS
				ELSE 100 
			END as INDEX_HIT_RATIO,
			CASE 
				WHEN POOL_XDA_L_READS > 0 
				THEN (POOL_XDA_LBP_PAGES_FOUND * 100) / POOL_XDA_L_READS
				ELSE 100 
			END as XDA_HIT_RATIO,
			0 as COLUMN_HIT_RATIO,
			SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS) as LOGICAL_READS,
			SUM(POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS) as PHYSICAL_READS,
			SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + 
			    POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS) as TOTAL_READS,
			-- Detailed read metrics
			SUM(POOL_DATA_L_READS) as DATA_LOGICAL_READS,
			SUM(POOL_DATA_P_READS) as DATA_PHYSICAL_READS,
			SUM(POOL_DATA_L_READS + POOL_DATA_P_READS) as DATA_TOTAL_READS,
			SUM(POOL_INDEX_L_READS) as INDEX_LOGICAL_READS,
			SUM(POOL_INDEX_P_READS) as INDEX_PHYSICAL_READS,
			SUM(POOL_INDEX_L_READS + POOL_INDEX_P_READS) as INDEX_TOTAL_READS,
			SUM(POOL_XDA_L_READS) as XDA_LOGICAL_READS,
			SUM(POOL_XDA_P_READS) as XDA_PHYSICAL_READS,
			SUM(POOL_XDA_L_READS + POOL_XDA_P_READS) as XDA_TOTAL_READS,
			0 as COLUMN_LOGICAL_READS,
			0 as COLUMN_PHYSICAL_READS,
			0 as COLUMN_TOTAL_READS
		FROM SYSIBMADM.SNAPBP
	`

	queryLogSpaceMetrics = `
		SELECT 
			TOTAL_LOG_USED,
			TOTAL_LOG_AVAILABLE,
			CASE 
				WHEN (TOTAL_LOG_USED + TOTAL_LOG_AVAILABLE) > 0 
				THEN (TOTAL_LOG_USED * 100) / (TOTAL_LOG_USED + TOTAL_LOG_AVAILABLE)
				ELSE 0 
			END as LOG_UTILIZATION,
			(SELECT SUM(LOG_READS) FROM SYSIBMADM.SNAPDB) as LOG_READS,
			(SELECT SUM(LOG_WRITES) FROM SYSIBMADM.SNAPDB) as LOG_WRITES
		FROM SYSIBMADM.LOG_UTILIZATION
	`

	queryLongRunningQueries = `
		SELECT 
			COUNT(*) as TOTAL_COUNT,
			SUM(CASE WHEN ELAPSED_TIME_MIN >= 5 AND ELAPSED_TIME_MIN < 15 THEN 1 ELSE 0 END) as WARNING_COUNT,
			SUM(CASE WHEN ELAPSED_TIME_MIN >= 15 THEN 1 ELSE 0 END) as CRITICAL_COUNT
		FROM SYSIBMADM.LONG_RUNNING_SQL
		WHERE ELAPSED_TIME_MIN > 0
	`

	queryBackupStatus = `
		SELECT 
			OPERATION,
			START_TIME,
			OPERATIONTYPE,
			SQLCODE
		FROM SYSIBMADM.DB_HISTORY
		WHERE OPERATION = 'B'
		  AND START_TIME >= CURRENT TIMESTAMP - %d DAYS
		ORDER BY START_TIME DESC
		FETCH FIRST 10 ROWS ONLY
	`
	queryBackupStatusSimple = `
		SELECT 
			MAX(START_TIME) as LAST_BACKUP
		FROM SYSIBMADM.DB_HISTORY
		WHERE OPERATION = 'B' AND SQLCODE = 0
	`

	queryDatabaseInstances = `
		SELECT 
			DB_NAME,
			DB_STATUS,
			APPLS_CUR_CONS
		FROM SYSIBMADM.SNAPDB
		FETCH FIRST %d ROWS ONLY
	`

	queryBufferpoolInstances = `
		SELECT 
			BP_NAME,
			PAGESIZE,
			NPAGES as TOTAL_PAGES,
			NPAGES - FREE_PAGES as USED_PAGES,
			-- Overall hit ratio
			CASE 
				WHEN (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) > 0 
				THEN ((POOL_DATA_LBP_PAGES_FOUND + POOL_INDEX_LBP_PAGES_FOUND + POOL_XDA_LBP_PAGES_FOUND + POOL_COL_LBP_PAGES_FOUND) * 100) / 
				     (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS)
				ELSE 100 
			END as HIT_RATIO,
			-- Data hit ratio
			CASE 
				WHEN POOL_DATA_L_READS > 0 
				THEN (POOL_DATA_LBP_PAGES_FOUND * 100) / POOL_DATA_L_READS
				ELSE 100 
			END as DATA_HIT_RATIO,
			-- Index hit ratio
			CASE 
				WHEN POOL_INDEX_L_READS > 0 
				THEN (POOL_INDEX_LBP_PAGES_FOUND * 100) / POOL_INDEX_L_READS
				ELSE 100 
			END as INDEX_HIT_RATIO,
			-- XDA hit ratio
			CASE 
				WHEN POOL_XDA_L_READS > 0 
				THEN (POOL_XDA_LBP_PAGES_FOUND * 100) / POOL_XDA_L_READS
				ELSE 100 
			END as XDA_HIT_RATIO,
			-- Column hit ratio
			CASE 
				WHEN POOL_COL_L_READS > 0 
				THEN (POOL_COL_LBP_PAGES_FOUND * 100) / POOL_COL_L_READS
				ELSE 100 
			END as COLUMN_HIT_RATIO,
			-- Read metrics
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS as LOGICAL_READS,
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS as PHYSICAL_READS,
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS + 
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS as TOTAL_READS,
			POOL_DATA_L_READS as DATA_LOGICAL_READS,
			POOL_DATA_P_READS as DATA_PHYSICAL_READS,
			POOL_INDEX_L_READS as INDEX_LOGICAL_READS,
			POOL_INDEX_P_READS as INDEX_PHYSICAL_READS,
			POOL_XDA_L_READS as XDA_LOGICAL_READS,
			POOL_XDA_P_READS as XDA_PHYSICAL_READS,
			POOL_COL_L_READS as COLUMN_LOGICAL_READS,
			POOL_COL_P_READS as COLUMN_PHYSICAL_READS,
			-- Write metrics
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS as WRITES
		FROM SYSIBMADM.SNAPBP
		FETCH FIRST %d ROWS ONLY
	`

	// Legacy buffer pool query without column-organized metrics (for DB2 < 10.5 or when column support unavailable)
	queryBufferpoolInstancesLegacy = `
		SELECT 
			BP_NAME,
			PAGESIZE,
			NPAGES as TOTAL_PAGES,
			NPAGES - FREE_PAGES as USED_PAGES,
			-- Overall hit ratio (without column metrics)
			CASE 
				WHEN (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS) > 0 
				THEN ((POOL_DATA_LBP_PAGES_FOUND + POOL_INDEX_LBP_PAGES_FOUND + POOL_XDA_LBP_PAGES_FOUND) * 100) / 
				     (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS)
				ELSE 100 
			END as HIT_RATIO,
			-- Data hit ratio
			CASE 
				WHEN POOL_DATA_L_READS > 0 
				THEN (POOL_DATA_LBP_PAGES_FOUND * 100) / POOL_DATA_L_READS
				ELSE 100 
			END as DATA_HIT_RATIO,
			-- Index hit ratio
			CASE 
				WHEN POOL_INDEX_L_READS > 0 
				THEN (POOL_INDEX_LBP_PAGES_FOUND * 100) / POOL_INDEX_L_READS
				ELSE 100 
			END as INDEX_HIT_RATIO,
			-- XDA hit ratio
			CASE 
				WHEN POOL_XDA_L_READS > 0 
				THEN (POOL_XDA_LBP_PAGES_FOUND * 100) / POOL_XDA_L_READS
				ELSE 100 
			END as XDA_HIT_RATIO,
			-- Column hit ratio (hardcoded to 0 for legacy)
			0 as COLUMN_HIT_RATIO,
			-- Read metrics (without column metrics)
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS as LOGICAL_READS,
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS as PHYSICAL_READS,
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + 
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS as TOTAL_READS,
			POOL_DATA_L_READS as DATA_LOGICAL_READS,
			POOL_DATA_P_READS as DATA_PHYSICAL_READS,
			POOL_INDEX_L_READS as INDEX_LOGICAL_READS,
			POOL_INDEX_P_READS as INDEX_PHYSICAL_READS,
			POOL_XDA_L_READS as XDA_LOGICAL_READS,
			POOL_XDA_P_READS as XDA_PHYSICAL_READS,
			0 as COLUMN_LOGICAL_READS,
			0 as COLUMN_PHYSICAL_READS,
			-- Write metrics (without column metrics)
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS as WRITES
		FROM SYSIBMADM.SNAPBP
		FETCH FIRST %d ROWS ONLY
	`

	queryTablespaceInstances = `
		SELECT 
			TBSP_NAME,
			TBSP_TYPE,
			TBSP_CONTENT_TYPE,
			TBSP_STATE,
			TBSP_TOTAL_SIZE_KB * 1024 as TOTAL_SIZE,
			TBSP_USED_SIZE_KB * 1024 as USED_SIZE,
			TBSP_FREE_SIZE_KB * 1024 as FREE_SIZE,
			TBSP_USABLE_SIZE_KB * 1024 as USABLE_SIZE,
			CASE 
				WHEN TBSP_TOTAL_SIZE_KB > 0 
				THEN (TBSP_USED_SIZE_KB * 100) / TBSP_TOTAL_SIZE_KB
				ELSE 0 
			END as USED_PERCENT,
			TBSP_PAGE_SIZE
		FROM SYSIBMADM.TBSP_UTILIZATION
		WHERE TBSP_TYPE = 'DMS'
		ORDER BY TBSP_USED_SIZE_KB DESC
		FETCH FIRST %d ROWS ONLY
	`

	queryConnectionInstances = `
		SELECT 
			APPLICATION_ID,
			APPLICATION_NAME,
			CLIENT_HOSTNAME,
			SESSION_AUTH_ID,
			APPL_STATUS,
			UOW_COMP_STATUS,
			ROWS_READ,
			ROWS_WRITTEN,
			TOTAL_CPU_TIME
		FROM SYSIBMADM.APPLICATIONS
		WHERE APPL_STATUS IN ('CONNECTED', 'UOWEXEC')
		ORDER BY TOTAL_CPU_TIME DESC
		FETCH FIRST %d ROWS ONLY
	`

	queryTableInstances = `
		SELECT 
			TABSCHEMA,
			TABNAME,
			DATA_OBJECT_P_SIZE,
			INDEX_OBJECT_P_SIZE,
			LONG_OBJECT_P_SIZE,
			ROWS_READ,
			ROWS_WRITTEN
		FROM SYSIBMADM.ADMINTABINFO
		ORDER BY DATA_OBJECT_P_SIZE DESC
		FETCH FIRST %d ROWS ONLY
	`

	queryIndexInstances = `
		SELECT
			INDSCHEMA,
			INDNAME,
			NLEAF,
			INDEX_SCANS,
			FULL_SCANS
		FROM SYSCAT.INDEXES
		ORDER BY NLEAF DESC
		FETCH FIRST %d ROWS ONLY
	`

	queryDatabaseStatus = `
		SELECT 
			CASE 
				WHEN EXISTS (SELECT 1 FROM SYSIBMADM.SNAPDB WHERE DB_STATUS = 'ACTIVE') THEN 0
				WHEN EXISTS (SELECT 1 FROM SYSIBMADM.SNAPDB WHERE DB_STATUS = 'QUIESCED') THEN 2
				WHEN EXISTS (SELECT 1 FROM SYSIBMADM.SNAPDB WHERE DB_STATUS IN ('QUIESCE_PENDING', 'ROLLFORWARD')) THEN 1
				ELSE 3
			END as DB_STATUS_CHECK
		FROM SYSIBM.SYSDUMMY1
	`

	queryCanConnect = `SELECT 1 as CAN_CONNECT FROM SYSIBM.SYSDUMMY1`

	// Individual metric queries for resilience (following AS/400 pattern)
	// Core connection metrics - should always be available on LUW
	queryTotalConnections     = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS`
	queryActiveConnections    = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS = 'CONNECTED'`
	queryExecutingConnections = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS = 'UOWEXEC'`
	queryIdleConnections      = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS = 'CONNECTED' AND UOW_COMP_STATUS = 'NONE'`
	queryMaxConnections       = `SELECT COALESCE(NULLIF(VALUE, 'AUTOMATIC'), '40') FROM SYSIBMADM.DBCFG WHERE NAME = 'maxappls'`

	// Core lock metrics - should be available on most DB2 editions
	queryLockWaits         = `SELECT SUM(LOCK_WAITS) FROM SYSIBMADM.SNAPDB`
	queryLockTimeouts      = `SELECT SUM(LOCK_TIMEOUTS) FROM SYSIBMADM.SNAPDB`
	queryDeadlocks         = `SELECT SUM(DEADLOCKS) FROM SYSIBMADM.SNAPDB`
	queryLockEscalations   = `SELECT SUM(LOCK_ESCALS) FROM SYSIBMADM.SNAPDB`
	queryActiveLocks       = `SELECT SUM(LOCKS_HELD) FROM SYSIBMADM.SNAPDB`
	queryLockWaitTime      = `SELECT SUM(LOCK_WAIT_TIME) FROM SYSIBMADM.SNAPDB`
	queryLockWaitingAgents = `SELECT SUM(LOCKS_WAITING) FROM SYSIBMADM.SNAPDB`
	queryLockMemoryPages   = `SELECT SUM(LOCK_LIST_IN_USE) FROM SYSIBMADM.SNAPDB`

	// Sorting metrics
	queryTotalSorts    = `SELECT SUM(TOTAL_SORTS) FROM SYSIBMADM.SNAPDB`
	querySortOverflows = `SELECT SUM(SORT_OVERFLOWS) FROM SYSIBMADM.SNAPDB`

	// Row activity metrics
	queryRowsRead     = `SELECT SUM(ROWS_READ) FROM SYSIBMADM.SNAPDB`
	queryRowsModified = `SELECT SUM(ROWS_MODIFIED) FROM SYSIBMADM.SNAPDB`
	queryRowsReturned = `SELECT SUM(ROWS_SELECTED) FROM SYSIBMADM.SNAPDB`

	// Log space metrics
	queryLogUsedSpace      = `SELECT SUM(TOTAL_LOG_USED) FROM SYSIBMADM.LOG_UTILIZATION`
	queryLogAvailableSpace = `SELECT SUM(TOTAL_LOG_AVAILABLE) FROM SYSIBMADM.LOG_UTILIZATION`
	queryLogReads          = `SELECT SUM(LOG_READS) FROM SYSIBMADM.SNAPDB`
	queryLogWrites         = `SELECT SUM(LOG_WRITES) FROM SYSIBMADM.SNAPDB`

	// Buffer pool aggregate metrics
	queryBufferpoolLogicalReads   = `SELECT SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolPhysicalReads  = `SELECT SUM(POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolDataLogical    = `SELECT SUM(POOL_DATA_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolDataPhysical   = `SELECT SUM(POOL_DATA_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolIndexLogical   = `SELECT SUM(POOL_INDEX_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolIndexPhysical  = `SELECT SUM(POOL_INDEX_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolXDALogical     = `SELECT SUM(POOL_XDA_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolXDAPhysical    = `SELECT SUM(POOL_XDA_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolColumnLogical  = `SELECT SUM(POOL_COL_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolColumnPhysical = `SELECT SUM(POOL_COL_P_READS) FROM SYSIBMADM.SNAPBP`

	// Hit ratio components for calculation
	queryBufferpoolDataHits   = `SELECT SUM(POOL_DATA_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolIndexHits  = `SELECT SUM(POOL_INDEX_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolXDAHits    = `SELECT SUM(POOL_XDA_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolColumnHits = `SELECT SUM(POOL_COL_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`

	// Long running queries
	queryLongRunningTotal    = `SELECT COUNT(*) FROM SYSIBMADM.LONG_RUNNING_SQL WHERE ELAPSED_TIME_MIN > 0`
	queryLongRunningWarning  = `SELECT COUNT(*) FROM SYSIBMADM.LONG_RUNNING_SQL WHERE ELAPSED_TIME_MIN >= 5 AND ELAPSED_TIME_MIN < 15`
	queryLongRunningCritical = `SELECT COUNT(*) FROM SYSIBMADM.LONG_RUNNING_SQL WHERE ELAPSED_TIME_MIN >= 15`

	// Cloud-specific simplified queries (without problematic columns)
	queryBufferpoolInstancesCloud = `
		SELECT 
			BP_NAME,
			4096 as PAGESIZE,  -- Default page size for Cloud
			NPAGES as TOTAL_PAGES,
			NPAGES as USED_PAGES,  -- Approximate since FREE_PAGES not available
			-- Simplified hit ratio without column-organized metrics
			CASE 
				WHEN (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS) > 0 
				THEN ((POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS - 
				       POOL_DATA_P_READS - POOL_INDEX_P_READS - POOL_XDA_P_READS) * 100) / 
				     (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS)
				ELSE 100 
			END as HIT_RATIO,
			90 as DATA_HIT_RATIO,    -- Default values since LBP_PAGES_FOUND not available
			90 as INDEX_HIT_RATIO,
			90 as XDA_HIT_RATIO,
			0 as COLUMN_HIT_RATIO,   -- Column metrics not available
			-- Read metrics (without column-organized)
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS as LOGICAL_READS,
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS as PHYSICAL_READS,
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + 
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS as TOTAL_READS,
			POOL_DATA_L_READS as DATA_LOGICAL_READS,
			POOL_DATA_P_READS as DATA_PHYSICAL_READS,
			POOL_INDEX_L_READS as INDEX_LOGICAL_READS,
			POOL_INDEX_P_READS as INDEX_PHYSICAL_READS,
			POOL_XDA_L_READS as XDA_LOGICAL_READS,
			POOL_XDA_P_READS as XDA_PHYSICAL_READS,
			0 as COLUMN_LOGICAL_READS,
			0 as COLUMN_PHYSICAL_READS,
			-- Write metrics
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS as WRITES
		FROM SYSIBMADM.SNAPBP
		FETCH FIRST 10 ROWS ONLY
	`

	queryConnectionInstancesCloud = `
		SELECT 
			APPLICATION_ID,
			'Unknown' as APPLICATION_NAME,  -- Not available in Cloud
			CLIENT_HOSTNAME,
			SESSION_AUTH_ID,
			APPL_STATUS,
			'NONE' as UOW_COMP_STATUS,  -- Not available in Cloud
			ROWS_READ,
			ROWS_WRITTEN,
			TOTAL_CPU_TIME
		FROM SYSIBMADM.APPLICATIONS
		WHERE APPL_STATUS IN ('CONNECTED', 'UOWEXEC')
		ORDER BY TOTAL_CPU_TIME DESC
		FETCH FIRST 100 ROWS ONLY
	`

	queryGlobalConnectionsCloud = `
		SELECT 
			COUNT(*) as TOTAL_CONNS,
			SUM(CASE WHEN APPL_STATUS = 'CONNECTED' THEN 1 ELSE 0 END) as ACTIVE_CONNS,
			SUM(CASE WHEN APPL_STATUS = 'UOWEXEC' THEN 1 ELSE 0 END) as EXECUTING_CONNS,
			0 as IDLE_CONNS,  -- Cannot determine without UOW_COMP_STATUS
			(SELECT MAX(APPLS_CUR_CONS) FROM SYSIBMADM.SNAPDB) as MAX_CONNS
		FROM SYSIBMADM.APPLICATIONS
	`

	queryLockMetricsCloud = `
		SELECT 
			LOCK_WAITS,
			LOCK_TIMEOUTS,
			DEADLOCKS,
			LOCK_ESCALS,
			LOCKS_HELD as LOCK_ACTIVE,
			LOCK_WAIT_TIME,
			LOCKS_WAITING as LOCK_WAITING_AGENTS,
			LOCK_LIST_IN_USE as LOCK_MEMORY_PAGES,
			TOTAL_SORTS,
			SORT_OVERFLOWS,
			ROWS_READ,
			0 as ROWS_MODIFIED,  -- Not available in Cloud
			ROWS_SELECTED as ROWS_RETURNED
		FROM SYSIBMADM.SNAPDB
	`

	// Modern MON_GET_* function queries (DB2 9.7+ LUW)
	// These provide better performance and real-time data compared to SNAP* views

	// Database-level metrics using MON_GET_DATABASE
	queryMonGetDatabase = `
		SELECT 
			SUM(LOCK_WAITS) as LOCK_WAITS,
			SUM(LOCK_TIMEOUTS) as LOCK_TIMEOUTS,
			SUM(DEADLOCKS) as DEADLOCKS,
			SUM(LOCK_ESCALS) as LOCK_ESCALS,
			SUM(NUM_LOCKS_HELD) as LOCK_ACTIVE,
			SUM(LOCK_WAIT_TIME) as LOCK_WAIT_TIME,
			SUM(NUM_LOCKS_WAITING) as LOCK_WAITING_AGENTS,
			SUM(LOCK_LIST_IN_USE) as LOCK_MEMORY_PAGES,
			SUM(TOTAL_SORTS) as TOTAL_SORTS,
			SUM(SORT_OVERFLOWS) as SORT_OVERFLOWS,
			SUM(ROWS_READ) as ROWS_READ,
			SUM(ROWS_MODIFIED) as ROWS_MODIFIED,
			SUM(ROWS_RETURNED) as ROWS_RETURNED
		FROM TABLE(MON_GET_DATABASE(-2)) AS T
	`

	// Buffer pool metrics using MON_GET_BUFFERPOOL
	queryMonGetBufferpool = `
		SELECT 
			BP_NAME,
			POOL_DATA_L_READS,
			POOL_DATA_P_READS,
			POOL_INDEX_L_READS,
			POOL_INDEX_P_READS,
			POOL_XDA_L_READS,
			POOL_XDA_P_READS,
			POOL_COL_L_READS,
			POOL_COL_P_READS,
			POOL_DATA_LBP_PAGES_FOUND,
			POOL_INDEX_LBP_PAGES_FOUND,
			POOL_XDA_LBP_PAGES_FOUND,
			POOL_COL_LBP_PAGES_FOUND,
			AUTOMATIC,
			BP_CUR_BUFFSZ as POOL_CUR_SIZE,
			0 as POOL_WATERMARK
		FROM TABLE(MON_GET_BUFFERPOOL('',-2)) AS T
	`

	// Aggregate buffer pool metrics
	queryMonGetBufferpoolAggregate = `
		SELECT 
			SUM(POOL_DATA_L_READS) as DATA_LOGICAL_READS,
			SUM(POOL_DATA_P_READS) as DATA_PHYSICAL_READS,
			SUM(POOL_INDEX_L_READS) as INDEX_LOGICAL_READS,
			SUM(POOL_INDEX_P_READS) as INDEX_PHYSICAL_READS,
			SUM(POOL_XDA_L_READS) as XDA_LOGICAL_READS,
			SUM(POOL_XDA_P_READS) as XDA_PHYSICAL_READS,
			SUM(POOL_COL_L_READS) as COLUMN_LOGICAL_READS,
			SUM(POOL_COL_P_READS) as COLUMN_PHYSICAL_READS,
			SUM(POOL_DATA_LBP_PAGES_FOUND) as DATA_HITS,
			SUM(POOL_INDEX_LBP_PAGES_FOUND) as INDEX_HITS,
			SUM(POOL_XDA_LBP_PAGES_FOUND) as XDA_HITS,
			SUM(POOL_COL_LBP_PAGES_FOUND) as COLUMN_HITS
		FROM TABLE(MON_GET_BUFFERPOOL('',-2)) AS T
	`

	// Transaction log metrics using MON_GET_TRANSACTION_LOG
	queryMonGetTransactionLog = `
		SELECT 
			TOTAL_LOG_USED as TOTAL_LOG_USED,
			TOTAL_LOG_AVAILABLE as TOTAL_LOG_AVAILABLE,
			CASE 
				WHEN TOTAL_LOG_AVAILABLE > 0 
				THEN (TOTAL_LOG_USED * 100) / TOTAL_LOG_AVAILABLE
				ELSE 0 
			END as LOG_UTILIZATION,
			LOG_READS as LOG_READS,
			LOG_WRITES as LOG_WRITES
		FROM TABLE(MON_GET_TRANSACTION_LOG(-2)) AS T
		WHERE MEMBER = 0
	`

	// Tablespace metrics using MON_GET_TABLESPACE
	queryMonGetTablespace = `
		SELECT 
			TBSP_NAME,
			TBSP_TYPE,
			TBSP_CONTENT_TYPE,
			TBSP_STATE,
			TBSP_TOTAL_PAGES * TBSP_PAGE_SIZE as TOTAL_SIZE,
			TBSP_USED_PAGES * TBSP_PAGE_SIZE as USED_SIZE,
			TBSP_FREE_PAGES * TBSP_PAGE_SIZE as FREE_SIZE,
			(TBSP_TOTAL_PAGES - TBSP_PENDING_FREE_PAGES) * TBSP_PAGE_SIZE as USABLE_SIZE,
			CASE 
				WHEN TBSP_TOTAL_PAGES > 0 
				THEN (TBSP_USED_PAGES * 100) / TBSP_TOTAL_PAGES
				ELSE 0 
			END as USED_PERCENT,
			TBSP_PAGE_SIZE
		FROM TABLE(MON_GET_TABLESPACE('',-2)) AS T
		WHERE TBSP_TYPE = 'DMS'
		ORDER BY TBSP_USED_PAGES DESC
		FETCH FIRST %d ROWS ONLY
	`

	// Connection metrics using MON_GET_CONNECTION
	queryMonGetConnections = `
		SELECT 
			COUNT(*) as TOTAL_CONNS,
			SUM(CASE WHEN APPLICATION_HANDLE IS NOT NULL THEN 1 ELSE 0 END) as ACTIVE_CONNS,
			SUM(CASE WHEN CLIENT_IDLE_WAIT_TIME > 0 THEN 1 ELSE 0 END) as IDLE_CONNS,
			SUM(CASE WHEN UOW_START_TIME IS NOT NULL THEN 1 ELSE 0 END) as EXECUTING_CONNS
		FROM TABLE(MON_GET_CONNECTION(NULL,-2)) AS T
	`

	// Individual connection details
	queryMonGetConnectionDetails = `
		SELECT 
			APPLICATION_ID,
			APPLICATION_NAME,
			CLIENT_HOSTNAME,
			SESSION_AUTH_ID,
			CASE 
				WHEN UOW_START_TIME IS NOT NULL THEN 'UOWEXEC'
				ELSE 'CONNECTED'
			END as APPL_STATUS,
			ROWS_READ,
			ROWS_MODIFIED + ROWS_INSERTED + ROWS_UPDATED + ROWS_DELETED as ROWS_WRITTEN,
			TOTAL_CPU_TIME
		FROM TABLE(MON_GET_CONNECTION(NULL,-2)) AS T
		WHERE APPLICATION_HANDLE IS NOT NULL
		ORDER BY TOTAL_CPU_TIME DESC
		FETCH FIRST %d ROWS ONLY
	`

	// Statement cache monitoring using MON_GET_PKG_CACHE_STMT
	queryMonGetPkgCacheStmt = `
		SELECT 
			EXECUTABLE_ID,
			SUBSTR(STMT_TEXT, 1, 100) as STMT_PREVIEW,
			NUM_EXECUTIONS,
			NUM_EXEC_WITH_METRICS,
			TOTAL_ACT_TIME,
			TOTAL_ACT_WAIT_TIME,
			TOTAL_CPU_TIME,
			TOTAL_SECTION_TIME,
			CASE WHEN NUM_EXEC_WITH_METRICS > 0 
				THEN TOTAL_ACT_TIME / NUM_EXEC_WITH_METRICS 
				ELSE 0 
			END as AVG_EXEC_TIME_MS,
			ROWS_READ,
			ROWS_MODIFIED,
			CASE WHEN NUM_EXEC_WITH_METRICS > 0 
				THEN ROWS_READ / NUM_EXEC_WITH_METRICS 
				ELSE 0 
			END as AVG_ROWS_READ,
			TOTAL_SORTS,
			TOTAL_SECTION_SORT_TIME,
			LOCK_WAIT_TIME,
			TOTAL_ROUTINE_TIME,
			POOL_DATA_L_READS + POOL_INDEX_L_READS as LOGICAL_READS,
			POOL_DATA_P_READS + POOL_INDEX_P_READS as PHYSICAL_READS
		FROM TABLE(MON_GET_PKG_CACHE_STMT(NULL, NULL, NULL, -2)) AS T
		WHERE NUM_EXECUTIONS > 0
			AND TOTAL_CPU_TIME >= %d
			AND NUM_EXECUTIONS >= %d
		ORDER BY TOTAL_CPU_TIME DESC
		FETCH FIRST %d ROWS ONLY
	`

	// Memory pool monitoring using MON_GET_MEMORY_POOL
	queryMonGetMemoryPool = `
		SELECT 
			MEMORY_SET_TYPE,
			MEMORY_POOL_TYPE,
			MEMORY_POOL_USED,
			MEMORY_POOL_USED_HWM
		FROM TABLE(MON_GET_MEMORY_POOL('DATABASE', '', -2)) AS T
		ORDER BY MEMORY_POOL_USED DESC
	`

	// Enhanced connection wait metrics
	queryMonGetConnectionWaits = `
		SELECT 
			APPLICATION_ID,
			TOTAL_WAIT_TIME,
			LOCK_WAIT_TIME,
			DIRECT_READ_TIME + DIRECT_WRITE_TIME as IO_WAIT_TIME,
			CLIENT_IDLE_WAIT_TIME,
			TOTAL_RQST_TIME,
			TOTAL_ACT_TIME
		FROM TABLE(MON_GET_CONNECTION(NULL, -2)) AS T
		WHERE APPLICATION_HANDLE IS NOT NULL
			AND TOTAL_WAIT_TIME > 0
		ORDER BY TOTAL_WAIT_TIME DESC
		FETCH FIRST %d ROWS ONLY
	`

	// Table I/O statistics using MON_GET_TABLE
	queryMonGetTable = `
		SELECT 
			TABSCHEMA,
			TABNAME,
			TABLE_SCANS,
			ROWS_READ,
			ROWS_INSERTED,
			ROWS_UPDATED,
			ROWS_DELETED,
			OVERFLOW_ACCESSES
		FROM TABLE(MON_GET_TABLE(NULL, NULL, -2)) AS T
		WHERE ROWS_READ >= %d
		ORDER BY ROWS_READ DESC
		FETCH FIRST %d ROWS ONLY
	`

	// Enhanced buffer pool metrics
	queryMonGetBufferpoolEnhanced = `
		SELECT 
			BP_NAME,
			POOL_DATA_L_READS,
			POOL_DATA_P_READS,
			POOL_INDEX_L_READS,
			POOL_INDEX_P_READS,
			POOL_XDA_L_READS,
			POOL_XDA_P_READS,
			POOL_COL_L_READS,
			POOL_COL_P_READS,
			POOL_DATA_LBP_PAGES_FOUND,
			POOL_INDEX_LBP_PAGES_FOUND,
			POOL_XDA_LBP_PAGES_FOUND,
			POOL_COL_LBP_PAGES_FOUND,
			POOL_ASYNC_DATA_READS,
			POOL_ASYNC_DATA_WRITES,
			POOL_ASYNC_INDEX_READS,
			POOL_ASYNC_INDEX_WRITES,
			POOL_ASYNC_XDA_READS,
			POOL_ASYNC_XDA_WRITES,
			PREFETCH_WAIT_TIME,
			POOL_DRTY_PG_STEAL_CLNS,
			POOL_DRTY_PG_THRSH_CLNS,
			AUTOMATIC,
			BP_CUR_BUFFSZ as POOL_CUR_SIZE,
			0 as POOL_WATERMARK
		FROM TABLE(MON_GET_BUFFERPOOL('',-2)) AS T
	`
)
