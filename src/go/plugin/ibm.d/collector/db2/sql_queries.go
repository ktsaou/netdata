// SPDX-License-Identifier: GPL-3.0-or-later

package db2

const (
	// Edition detection queries - each targets specific edition characteristics
	queryDetectVersionLUW = `SELECT SERVICE_LEVEL FROM SYSIBMADM.ENV_INST_INFO`
	queryDetectVersionI = `SELECT 'DB2 for i' FROM SYSIBM.SYSDUMMY1`
	queryDetectVersionZOS = `SELECT VERSION FROM SYSIBM.SYSVERSIONS WHERE VERSION_TYPE = 'DB2'`
	queryDetectVersionCloud = `SELECT REGEXP_REPLACE(PROD_RELEASE, '^.*Cloud.*$', 'Db2 on Cloud') FROM TABLE(SYSPROC.ENV_GET_INST_INFO()) WHERE REGEXP_LIKE(PROD_RELEASE, '.*Cloud.*')`

	queryGlobalConnections = `
		SELECT 
			COUNT(*) as TOTAL_CONNS,
			SUM(CASE WHEN APPL_STATUS = 'CONNECTED' THEN 1 ELSE 0 END) as ACTIVE_CONNS,
			SUM(CASE WHEN APPL_STATUS = 'UOWEXEC' THEN 1 ELSE 0 END) as EXECUTING_CONNS,
			SUM(CASE WHEN APPL_STATUS = 'CONNECTED' AND UOW_COMP_STATUS = 'NONE' THEN 1 ELSE 0 END) as IDLE_CONNS,
			(SELECT MAX(APPLS_CUR_CONS) FROM SYSIBMADM.SNAPDB) as MAX_CONNS
		FROM SYSIBMADM.APPLICATIONS
	`
	queryGlobalConnectionsSimple = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS`

	queryLockMetrics = `
		SELECT 
			LOCK_WAITS,
			LOCK_TIMEOUTS,
			DEADLOCKS,
			LOCK_ESCALS,
			LOCKS_HELD as LOCK_ACTIVE,
			LOCK_WAIT_TIME,
			LOCKS_WAITING as LOCK_WAITING_AGENTS,
			LOCK_LIST_IN_USE as LOCK_MEMORY_PAGES,
			TOTAL_SORTS,
			SORT_OVERFLOWS,
			ROWS_READ,
			ROWS_MODIFIED,
			ROWS_SELECTED as ROWS_RETURNED
		FROM SYSIBMADM.SNAPDB
	`

	queryBufferpoolAggregateMetrics = `
		SELECT 
			CASE 
				WHEN (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) > 0 
				THEN ((POOL_DATA_LBP_PAGES_FOUND + POOL_INDEX_LBP_PAGES_FOUND + POOL_XDA_LBP_PAGES_FOUND + POOL_COL_LBP_PAGES_FOUND) * 100) / 
				     (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS)
				ELSE 100 
			END as HIT_RATIO,
			CASE 
				WHEN POOL_DATA_L_READS > 0 
				THEN (POOL_DATA_LBP_PAGES_FOUND * 100) / POOL_DATA_L_READS
				ELSE 100 
			END as DATA_HIT_RATIO,
			CASE 
				WHEN POOL_INDEX_L_READS > 0 
				THEN (POOL_INDEX_LBP_PAGES_FOUND * 100) / POOL_INDEX_L_READS
				ELSE 100 
			END as INDEX_HIT_RATIO,
			CASE 
				WHEN POOL_XDA_L_READS > 0 
				THEN (POOL_XDA_LBP_PAGES_FOUND * 100) / POOL_XDA_L_READS
				ELSE 100 
			END as XDA_HIT_RATIO,
			CASE 
				WHEN POOL_COL_L_READS > 0 
				THEN (POOL_COL_LBP_PAGES_FOUND * 100) / POOL_COL_L_READS
				ELSE 100 
			END as COLUMN_HIT_RATIO,
			SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) as LOGICAL_READS,
			SUM(POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS) as PHYSICAL_READS,
			SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS + 
			    POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS) as TOTAL_READS,
			-- Detailed read metrics
			SUM(POOL_DATA_L_READS) as DATA_LOGICAL_READS,
			SUM(POOL_DATA_P_READS) as DATA_PHYSICAL_READS,
			SUM(POOL_DATA_L_READS + POOL_DATA_P_READS) as DATA_TOTAL_READS,
			SUM(POOL_INDEX_L_READS) as INDEX_LOGICAL_READS,
			SUM(POOL_INDEX_P_READS) as INDEX_PHYSICAL_READS,
			SUM(POOL_INDEX_L_READS + POOL_INDEX_P_READS) as INDEX_TOTAL_READS,
			SUM(POOL_XDA_L_READS) as XDA_LOGICAL_READS,
			SUM(POOL_XDA_P_READS) as XDA_PHYSICAL_READS,
			SUM(POOL_XDA_L_READS + POOL_XDA_P_READS) as XDA_TOTAL_READS,
			SUM(POOL_COL_L_READS) as COLUMN_LOGICAL_READS,
			SUM(POOL_COL_P_READS) as COLUMN_PHYSICAL_READS,
			SUM(POOL_COL_L_READS + POOL_COL_P_READS) as COLUMN_TOTAL_READS
		FROM SYSIBMADM.SNAPBP
	`

	queryLogSpaceMetrics = `
		SELECT 
			TOTAL_LOG_USED,
			TOTAL_LOG_AVAILABLE,
			CASE 
				WHEN (TOTAL_LOG_USED + TOTAL_LOG_AVAILABLE) > 0 
				THEN (TOTAL_LOG_USED * 100) / (TOTAL_LOG_USED + TOTAL_LOG_AVAILABLE)
				ELSE 0 
			END as LOG_UTILIZATION,
			(SELECT SUM(LOG_READS) FROM SYSIBMADM.SNAPDB) as LOG_READS,
			(SELECT SUM(LOG_WRITES) FROM SYSIBMADM.SNAPDB) as LOG_WRITES
		FROM SYSIBMADM.LOG_UTILIZATION
	`

	queryLongRunningQueries = `
		SELECT 
			COUNT(*) as TOTAL_COUNT,
			SUM(CASE WHEN ELAPSED_TIME_MIN >= 5 AND ELAPSED_TIME_MIN < 15 THEN 1 ELSE 0 END) as WARNING_COUNT,
			SUM(CASE WHEN ELAPSED_TIME_MIN >= 15 THEN 1 ELSE 0 END) as CRITICAL_COUNT
		FROM SYSIBMADM.LONG_RUNNING_SQL
		WHERE ELAPSED_TIME_MIN > 0
	`

	queryBackupStatus = `
		SELECT 
			OPERATION,
			START_TIME,
			OPERATIONTYPE,
			SQLCODE
		FROM SYSIBMADM.DB_HISTORY
		WHERE OPERATION = 'B'
		  AND START_TIME >= CURRENT TIMESTAMP - %d DAYS
		ORDER BY START_TIME DESC
		FETCH FIRST 10 ROWS ONLY
	`
	queryBackupStatusSimple = `
		SELECT 
			MAX(START_TIME) as LAST_BACKUP
		FROM SYSIBMADM.DB_HISTORY
		WHERE OPERATION = 'B' AND SQLCODE = 0
	`

	queryDatabaseInstances = `
		SELECT 
			DB_NAME,
			DB_STATUS,
			APPLS_CUR_CONS
		FROM SYSIBMADM.SNAPDB
		FETCH FIRST %d ROWS ONLY
	`

	queryBufferpoolInstances = `
		SELECT 
			BP_NAME,
			PAGESIZE,
			NPAGES as TOTAL_PAGES,
			NPAGES - FREE_PAGES as USED_PAGES,
			-- Overall hit ratio
			CASE 
				WHEN (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) > 0 
				THEN ((POOL_DATA_LBP_PAGES_FOUND + POOL_INDEX_LBP_PAGES_FOUND + POOL_XDA_LBP_PAGES_FOUND + POOL_COL_LBP_PAGES_FOUND) * 100) / 
				     (POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS)
				ELSE 100 
			END as HIT_RATIO,
			-- Data hit ratio
			CASE 
				WHEN POOL_DATA_L_READS > 0 
				THEN (POOL_DATA_LBP_PAGES_FOUND * 100) / POOL_DATA_L_READS
				ELSE 100 
			END as DATA_HIT_RATIO,
			-- Index hit ratio
			CASE 
				WHEN POOL_INDEX_L_READS > 0 
				THEN (POOL_INDEX_LBP_PAGES_FOUND * 100) / POOL_INDEX_L_READS
				ELSE 100 
			END as INDEX_HIT_RATIO,
			-- XDA hit ratio
			CASE 
				WHEN POOL_XDA_L_READS > 0 
				THEN (POOL_XDA_LBP_PAGES_FOUND * 100) / POOL_XDA_L_READS
				ELSE 100 
			END as XDA_HIT_RATIO,
			-- Column hit ratio
			CASE 
				WHEN POOL_COL_L_READS > 0 
				THEN (POOL_COL_LBP_PAGES_FOUND * 100) / POOL_COL_L_READS
				ELSE 100 
			END as COLUMN_HIT_RATIO,
			-- Read metrics
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS as LOGICAL_READS,
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS as PHYSICAL_READS,
			POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS + 
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS as TOTAL_READS,
			POOL_DATA_L_READS as DATA_LOGICAL_READS,
			POOL_DATA_P_READS as DATA_PHYSICAL_READS,
			POOL_INDEX_L_READS as INDEX_LOGICAL_READS,
			POOL_INDEX_P_READS as INDEX_PHYSICAL_READS,
			POOL_XDA_L_READS as XDA_LOGICAL_READS,
			POOL_XDA_P_READS as XDA_PHYSICAL_READS,
			POOL_COL_L_READS as COLUMN_LOGICAL_READS,
			POOL_COL_P_READS as COLUMN_PHYSICAL_READS,
			-- Write metrics
			POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS as WRITES
		FROM SYSIBMADM.SNAPBP
		FETCH FIRST %d ROWS ONLY
	`

	queryTablespaceInstances = `
		SELECT 
			TBSP_NAME,
			TBSP_TYPE,
			TBSP_CONTENT_TYPE,
			TBSP_STATE,
			TBSP_TOTAL_SIZE_KB * 1024 as TOTAL_SIZE,
			TBSP_USED_SIZE_KB * 1024 as USED_SIZE,
			TBSP_FREE_SIZE_KB * 1024 as FREE_SIZE,
			TBSP_USABLE_SIZE_KB * 1024 as USABLE_SIZE,
			CASE 
				WHEN TBSP_TOTAL_SIZE_KB > 0 
				THEN (TBSP_USED_SIZE_KB * 100) / TBSP_TOTAL_SIZE_KB
				ELSE 0 
			END as USED_PERCENT,
			TBSP_PAGE_SIZE
		FROM SYSIBMADM.TBSP_UTILIZATION
		WHERE TBSP_TYPE = 'DMS'
		ORDER BY TBSP_USED_SIZE_KB DESC
		FETCH FIRST %d ROWS ONLY
	`

	queryConnectionInstances = `
		SELECT 
			APPLICATION_ID,
			APPLICATION_NAME,
			CLIENT_HOSTNAME,
			SESSION_AUTH_ID,
			APPL_STATUS,
			UOW_COMP_STATUS,
			ROWS_READ,
			ROWS_WRITTEN,
			TOTAL_CPU_TIME
		FROM SYSIBMADM.APPLICATIONS
		WHERE APPL_STATUS IN ('CONNECTED', 'UOWEXEC')
		ORDER BY TOTAL_CPU_TIME DESC
		FETCH FIRST %d ROWS ONLY
	`

	queryTableInstances = `
		SELECT 
			TABSCHEMA,
			TABNAME,
			DATA_OBJECT_P_SIZE,
			INDEX_OBJECT_P_SIZE,
			LONG_OBJECT_P_SIZE,
			ROWS_READ,
			ROWS_WRITTEN
		FROM SYSIBMADM.ADMINTABINFO
		ORDER BY DATA_OBJECT_P_SIZE DESC
		FETCH FIRST %d ROWS ONLY
	`

	queryIndexInstances = `
		SELECT
			INDSCHEMA,
			INDNAME,
			NLEAF,
			INDEX_SCANS,
			FULL_SCANS
		FROM SYSCAT.INDEXES
		ORDER BY NLEAF DESC
		FETCH FIRST %d ROWS ONLY
	`
	
	queryDatabaseStatus = `
		SELECT 
			CASE 
				WHEN EXISTS (SELECT 1 FROM SYSIBMADM.SNAPDB WHERE DB_STATUS = 'ACTIVE') THEN 0
				WHEN EXISTS (SELECT 1 FROM SYSIBMADM.SNAPDB WHERE DB_STATUS = 'QUIESCED') THEN 2
				WHEN EXISTS (SELECT 1 FROM SYSIBMADM.SNAPDB WHERE DB_STATUS IN ('QUIESCE_PENDING', 'ROLLFORWARD')) THEN 1
				ELSE 3
			END as DB_STATUS_CHECK
		FROM SYSIBM.SYSDUMMY1
	`
	
	queryCanConnect = `SELECT 1 as CAN_CONNECT FROM SYSIBM.SYSDUMMY1`

	// Individual metric queries for resilience (following AS/400 pattern)
	// Core connection metrics - should always be available on LUW
	queryTotalConnections    = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS`
	queryActiveConnections   = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS = 'CONNECTED'`
	queryExecutingConnections = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS = 'UOWEXEC'`
	queryIdleConnections     = `SELECT COUNT(*) FROM SYSIBMADM.APPLICATIONS WHERE APPL_STATUS = 'CONNECTED' AND UOW_COMP_STATUS = 'NONE'`
	queryMaxConnections      = `SELECT MAX(APPLS_CUR_CONS) FROM SYSIBMADM.SNAPDB`

	// Core lock metrics - should be available on most DB2 editions  
	queryLockWaits           = `SELECT SUM(LOCK_WAITS) FROM SYSIBMADM.SNAPDB`
	queryLockTimeouts        = `SELECT SUM(LOCK_TIMEOUTS) FROM SYSIBMADM.SNAPDB`  
	queryDeadlocks           = `SELECT SUM(DEADLOCKS) FROM SYSIBMADM.SNAPDB`
	queryLockEscalations     = `SELECT SUM(LOCK_ESCALS) FROM SYSIBMADM.SNAPDB`
	queryActiveLocks         = `SELECT SUM(LOCKS_HELD) FROM SYSIBMADM.SNAPDB`
	queryLockWaitTime        = `SELECT SUM(LOCK_WAIT_TIME) FROM SYSIBMADM.SNAPDB`
	queryLockWaitingAgents   = `SELECT SUM(LOCKS_WAITING) FROM SYSIBMADM.SNAPDB`
	queryLockMemoryPages     = `SELECT SUM(LOCK_LIST_IN_USE) FROM SYSIBMADM.SNAPDB`

	// Sorting metrics
	queryTotalSorts          = `SELECT SUM(TOTAL_SORTS) FROM SYSIBMADM.SNAPDB`
	querySortOverflows       = `SELECT SUM(SORT_OVERFLOWS) FROM SYSIBMADM.SNAPDB`

	// Row activity metrics
	queryRowsRead            = `SELECT SUM(ROWS_READ) FROM SYSIBMADM.SNAPDB`
	queryRowsModified        = `SELECT SUM(ROWS_MODIFIED) FROM SYSIBMADM.SNAPDB`
	queryRowsReturned        = `SELECT SUM(ROWS_SELECTED) FROM SYSIBMADM.SNAPDB`

	// Log space metrics
	queryLogUsedSpace        = `SELECT SUM(TOTAL_LOG_USED) FROM SYSIBMADM.LOG_UTILIZATION`
	queryLogAvailableSpace   = `SELECT SUM(TOTAL_LOG_AVAILABLE) FROM SYSIBMADM.LOG_UTILIZATION`
	queryLogReads            = `SELECT SUM(LOG_READS) FROM SYSIBMADM.SNAPDB`
	queryLogWrites           = `SELECT SUM(LOG_WRITES) FROM SYSIBMADM.SNAPDB`

	// Buffer pool aggregate metrics
	queryBufferpoolLogicalReads  = `SELECT SUM(POOL_DATA_L_READS + POOL_INDEX_L_READS + POOL_XDA_L_READS + POOL_COL_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolPhysicalReads = `SELECT SUM(POOL_DATA_P_READS + POOL_INDEX_P_READS + POOL_XDA_P_READS + POOL_COL_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolDataLogical   = `SELECT SUM(POOL_DATA_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolDataPhysical  = `SELECT SUM(POOL_DATA_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolIndexLogical  = `SELECT SUM(POOL_INDEX_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolIndexPhysical = `SELECT SUM(POOL_INDEX_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolXDALogical    = `SELECT SUM(POOL_XDA_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolXDAPhysical   = `SELECT SUM(POOL_XDA_P_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolColumnLogical = `SELECT SUM(POOL_COL_L_READS) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolColumnPhysical = `SELECT SUM(POOL_COL_P_READS) FROM SYSIBMADM.SNAPBP`

	// Hit ratio components for calculation
	queryBufferpoolDataHits      = `SELECT SUM(POOL_DATA_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolIndexHits     = `SELECT SUM(POOL_INDEX_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolXDAHits       = `SELECT SUM(POOL_XDA_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`
	queryBufferpoolColumnHits    = `SELECT SUM(POOL_COL_LBP_PAGES_FOUND) FROM SYSIBMADM.SNAPBP`

	// Long running queries
	queryLongRunningTotal        = `SELECT COUNT(*) FROM SYSIBMADM.LONG_RUNNING_SQL WHERE ELAPSED_TIME_MIN > 0`
	queryLongRunningWarning      = `SELECT COUNT(*) FROM SYSIBMADM.LONG_RUNNING_SQL WHERE ELAPSED_TIME_MIN >= 5 AND ELAPSED_TIME_MIN < 15`
	queryLongRunningCritical     = `SELECT COUNT(*) FROM SYSIBMADM.LONG_RUNNING_SQL WHERE ELAPSED_TIME_MIN >= 15`
)
